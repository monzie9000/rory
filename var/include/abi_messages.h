/* Automatically generated by gen_abi from /home/ray/rory/conf/abi.xml */
/* Version v5.8.2_stable-none-g61b5016-dirty */
/* Please DO NOT EDIT */

/* Onboard middleware library ABI
 * send and receive messages of class airborne
 */

#ifndef ABI_MESSAGES_H
#define ABI_MESSAGES_H

#include "subsystems/abi_common.h"

/* Messages IDs */
#define ABI_BARO_ABS_ID 0
#define ABI_BARO_DIFF_ID 1
#define ABI_AGL_ID 2
#define ABI_TEMPERATURE_ID 3
#define ABI_IMU_GYRO_INT32_ID 4
#define ABI_IMU_ACCEL_INT32_ID 5
#define ABI_IMU_MAG_INT32_ID 6
#define ABI_IMU_LOWPASSED_ID 7
#define ABI_BODY_TO_IMU_QUAT_ID 8
#define ABI_GEO_MAG_ID 9
#define ABI_GPS_ID 10
#define ABI_OPTICAL_FLOW_ID 11
#define ABI_VELOCITY_ESTIMATE_ID 12

/* Array and linked list structure */
#define ABI_MESSAGE_NB 13

ABI_EXTERN abi_event* abi_queues[ABI_MESSAGE_NB];

/* Callbacks */
typedef void (*abi_callbackBARO_ABS)(uint8_t sender_id, float pressure);
typedef void (*abi_callbackBARO_DIFF)(uint8_t sender_id, float pressure);
typedef void (*abi_callbackAGL)(uint8_t sender_id, float distance);
typedef void (*abi_callbackTEMPERATURE)(uint8_t sender_id, float temp);
typedef void (*abi_callbackIMU_GYRO_INT32)(uint8_t sender_id, uint32_t stamp, struct Int32Rates * gyro);
typedef void (*abi_callbackIMU_ACCEL_INT32)(uint8_t sender_id, uint32_t stamp, struct Int32Vect3 * accel);
typedef void (*abi_callbackIMU_MAG_INT32)(uint8_t sender_id, uint32_t stamp, struct Int32Vect3 * mag);
typedef void (*abi_callbackIMU_LOWPASSED)(uint8_t sender_id, uint32_t stamp, struct Int32Rates * gyro, struct Int32Vect3 * accel, struct Int32Vect3 * mag);
typedef void (*abi_callbackBODY_TO_IMU_QUAT)(uint8_t sender_id, struct FloatQuat * q_b2i_f);
typedef void (*abi_callbackGEO_MAG)(uint8_t sender_id, struct FloatVect3 * h);
typedef void (*abi_callbackGPS)(uint8_t sender_id, uint32_t stamp, struct GpsState * gps_s);
typedef void (*abi_callbackOPTICAL_FLOW)(uint8_t sender_id, uint32_t stamp, int16_t flow_x, int16_t flow_y, int16_t flow_der_x, int16_t flow_der_y, uint8_t quality, float dist);
typedef void (*abi_callbackVELOCITY_ESTIMATE)(uint8_t sender_id, uint32_t stamp, float x, float y, float z, float noise);

/* Bind and Send functions */

static inline void AbiBindMsgBARO_ABS(uint8_t sender_id, abi_event * ev, abi_callbackBARO_ABS cb) {
  ev->id = sender_id;
  ev->cb = (abi_callback)cb;
  ABI_PREPEND(abi_queues[ABI_BARO_ABS_ID],ev);
}

static inline void AbiSendMsgBARO_ABS(uint8_t sender_id, float pressure) {
  abi_event* e;
  ABI_FOREACH(abi_queues[ABI_BARO_ABS_ID],e) {
    if (e->id == ABI_BROADCAST || e->id == sender_id) {
      abi_callbackBARO_ABS cb = (abi_callbackBARO_ABS)(e->cb);
      cb(sender_id, pressure);
    }
  }
}

static inline void AbiBindMsgBARO_DIFF(uint8_t sender_id, abi_event * ev, abi_callbackBARO_DIFF cb) {
  ev->id = sender_id;
  ev->cb = (abi_callback)cb;
  ABI_PREPEND(abi_queues[ABI_BARO_DIFF_ID],ev);
}

static inline void AbiSendMsgBARO_DIFF(uint8_t sender_id, float pressure) {
  abi_event* e;
  ABI_FOREACH(abi_queues[ABI_BARO_DIFF_ID],e) {
    if (e->id == ABI_BROADCAST || e->id == sender_id) {
      abi_callbackBARO_DIFF cb = (abi_callbackBARO_DIFF)(e->cb);
      cb(sender_id, pressure);
    }
  }
}

static inline void AbiBindMsgAGL(uint8_t sender_id, abi_event * ev, abi_callbackAGL cb) {
  ev->id = sender_id;
  ev->cb = (abi_callback)cb;
  ABI_PREPEND(abi_queues[ABI_AGL_ID],ev);
}

static inline void AbiSendMsgAGL(uint8_t sender_id, float distance) {
  abi_event* e;
  ABI_FOREACH(abi_queues[ABI_AGL_ID],e) {
    if (e->id == ABI_BROADCAST || e->id == sender_id) {
      abi_callbackAGL cb = (abi_callbackAGL)(e->cb);
      cb(sender_id, distance);
    }
  }
}

static inline void AbiBindMsgTEMPERATURE(uint8_t sender_id, abi_event * ev, abi_callbackTEMPERATURE cb) {
  ev->id = sender_id;
  ev->cb = (abi_callback)cb;
  ABI_PREPEND(abi_queues[ABI_TEMPERATURE_ID],ev);
}

static inline void AbiSendMsgTEMPERATURE(uint8_t sender_id, float temp) {
  abi_event* e;
  ABI_FOREACH(abi_queues[ABI_TEMPERATURE_ID],e) {
    if (e->id == ABI_BROADCAST || e->id == sender_id) {
      abi_callbackTEMPERATURE cb = (abi_callbackTEMPERATURE)(e->cb);
      cb(sender_id, temp);
    }
  }
}

static inline void AbiBindMsgIMU_GYRO_INT32(uint8_t sender_id, abi_event * ev, abi_callbackIMU_GYRO_INT32 cb) {
  ev->id = sender_id;
  ev->cb = (abi_callback)cb;
  ABI_PREPEND(abi_queues[ABI_IMU_GYRO_INT32_ID],ev);
}

static inline void AbiSendMsgIMU_GYRO_INT32(uint8_t sender_id, uint32_t stamp, struct Int32Rates * gyro) {
  abi_event* e;
  ABI_FOREACH(abi_queues[ABI_IMU_GYRO_INT32_ID],e) {
    if (e->id == ABI_BROADCAST || e->id == sender_id) {
      abi_callbackIMU_GYRO_INT32 cb = (abi_callbackIMU_GYRO_INT32)(e->cb);
      cb(sender_id, stamp, gyro);
    }
  }
}

static inline void AbiBindMsgIMU_ACCEL_INT32(uint8_t sender_id, abi_event * ev, abi_callbackIMU_ACCEL_INT32 cb) {
  ev->id = sender_id;
  ev->cb = (abi_callback)cb;
  ABI_PREPEND(abi_queues[ABI_IMU_ACCEL_INT32_ID],ev);
}

static inline void AbiSendMsgIMU_ACCEL_INT32(uint8_t sender_id, uint32_t stamp, struct Int32Vect3 * accel) {
  abi_event* e;
  ABI_FOREACH(abi_queues[ABI_IMU_ACCEL_INT32_ID],e) {
    if (e->id == ABI_BROADCAST || e->id == sender_id) {
      abi_callbackIMU_ACCEL_INT32 cb = (abi_callbackIMU_ACCEL_INT32)(e->cb);
      cb(sender_id, stamp, accel);
    }
  }
}

static inline void AbiBindMsgIMU_MAG_INT32(uint8_t sender_id, abi_event * ev, abi_callbackIMU_MAG_INT32 cb) {
  ev->id = sender_id;
  ev->cb = (abi_callback)cb;
  ABI_PREPEND(abi_queues[ABI_IMU_MAG_INT32_ID],ev);
}

static inline void AbiSendMsgIMU_MAG_INT32(uint8_t sender_id, uint32_t stamp, struct Int32Vect3 * mag) {
  abi_event* e;
  ABI_FOREACH(abi_queues[ABI_IMU_MAG_INT32_ID],e) {
    if (e->id == ABI_BROADCAST || e->id == sender_id) {
      abi_callbackIMU_MAG_INT32 cb = (abi_callbackIMU_MAG_INT32)(e->cb);
      cb(sender_id, stamp, mag);
    }
  }
}

static inline void AbiBindMsgIMU_LOWPASSED(uint8_t sender_id, abi_event * ev, abi_callbackIMU_LOWPASSED cb) {
  ev->id = sender_id;
  ev->cb = (abi_callback)cb;
  ABI_PREPEND(abi_queues[ABI_IMU_LOWPASSED_ID],ev);
}

static inline void AbiSendMsgIMU_LOWPASSED(uint8_t sender_id, uint32_t stamp, struct Int32Rates * gyro, struct Int32Vect3 * accel, struct Int32Vect3 * mag) {
  abi_event* e;
  ABI_FOREACH(abi_queues[ABI_IMU_LOWPASSED_ID],e) {
    if (e->id == ABI_BROADCAST || e->id == sender_id) {
      abi_callbackIMU_LOWPASSED cb = (abi_callbackIMU_LOWPASSED)(e->cb);
      cb(sender_id, stamp, gyro, accel, mag);
    }
  }
}

static inline void AbiBindMsgBODY_TO_IMU_QUAT(uint8_t sender_id, abi_event * ev, abi_callbackBODY_TO_IMU_QUAT cb) {
  ev->id = sender_id;
  ev->cb = (abi_callback)cb;
  ABI_PREPEND(abi_queues[ABI_BODY_TO_IMU_QUAT_ID],ev);
}

static inline void AbiSendMsgBODY_TO_IMU_QUAT(uint8_t sender_id, struct FloatQuat * q_b2i_f) {
  abi_event* e;
  ABI_FOREACH(abi_queues[ABI_BODY_TO_IMU_QUAT_ID],e) {
    if (e->id == ABI_BROADCAST || e->id == sender_id) {
      abi_callbackBODY_TO_IMU_QUAT cb = (abi_callbackBODY_TO_IMU_QUAT)(e->cb);
      cb(sender_id, q_b2i_f);
    }
  }
}

static inline void AbiBindMsgGEO_MAG(uint8_t sender_id, abi_event * ev, abi_callbackGEO_MAG cb) {
  ev->id = sender_id;
  ev->cb = (abi_callback)cb;
  ABI_PREPEND(abi_queues[ABI_GEO_MAG_ID],ev);
}

static inline void AbiSendMsgGEO_MAG(uint8_t sender_id, struct FloatVect3 * h) {
  abi_event* e;
  ABI_FOREACH(abi_queues[ABI_GEO_MAG_ID],e) {
    if (e->id == ABI_BROADCAST || e->id == sender_id) {
      abi_callbackGEO_MAG cb = (abi_callbackGEO_MAG)(e->cb);
      cb(sender_id, h);
    }
  }
}

static inline void AbiBindMsgGPS(uint8_t sender_id, abi_event * ev, abi_callbackGPS cb) {
  ev->id = sender_id;
  ev->cb = (abi_callback)cb;
  ABI_PREPEND(abi_queues[ABI_GPS_ID],ev);
}

static inline void AbiSendMsgGPS(uint8_t sender_id, uint32_t stamp, struct GpsState * gps_s) {
  abi_event* e;
  ABI_FOREACH(abi_queues[ABI_GPS_ID],e) {
    if (e->id == ABI_BROADCAST || e->id == sender_id) {
      abi_callbackGPS cb = (abi_callbackGPS)(e->cb);
      cb(sender_id, stamp, gps_s);
    }
  }
}

static inline void AbiBindMsgOPTICAL_FLOW(uint8_t sender_id, abi_event * ev, abi_callbackOPTICAL_FLOW cb) {
  ev->id = sender_id;
  ev->cb = (abi_callback)cb;
  ABI_PREPEND(abi_queues[ABI_OPTICAL_FLOW_ID],ev);
}

static inline void AbiSendMsgOPTICAL_FLOW(uint8_t sender_id, uint32_t stamp, int16_t flow_x, int16_t flow_y, int16_t flow_der_x, int16_t flow_der_y, uint8_t quality, float dist) {
  abi_event* e;
  ABI_FOREACH(abi_queues[ABI_OPTICAL_FLOW_ID],e) {
    if (e->id == ABI_BROADCAST || e->id == sender_id) {
      abi_callbackOPTICAL_FLOW cb = (abi_callbackOPTICAL_FLOW)(e->cb);
      cb(sender_id, stamp, flow_x, flow_y, flow_der_x, flow_der_y, quality, dist);
    }
  }
}

static inline void AbiBindMsgVELOCITY_ESTIMATE(uint8_t sender_id, abi_event * ev, abi_callbackVELOCITY_ESTIMATE cb) {
  ev->id = sender_id;
  ev->cb = (abi_callback)cb;
  ABI_PREPEND(abi_queues[ABI_VELOCITY_ESTIMATE_ID],ev);
}

static inline void AbiSendMsgVELOCITY_ESTIMATE(uint8_t sender_id, uint32_t stamp, float x, float y, float z, float noise) {
  abi_event* e;
  ABI_FOREACH(abi_queues[ABI_VELOCITY_ESTIMATE_ID],e) {
    if (e->id == ABI_BROADCAST || e->id == sender_id) {
      abi_callbackVELOCITY_ESTIMATE cb = (abi_callbackVELOCITY_ESTIMATE)(e->cb);
      cb(sender_id, stamp, x, y, z, noise);
    }
  }
}

#endif // ABI_MESSAGES_H
