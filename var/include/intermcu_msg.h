/* Automatically generated by gen_messages from /home/rc/papa/conf/messages.xml */
/* Version v5.8.2_stable-1-g22dabc7-dirty */
/* Please DO NOT EDIT */
/* Macros to send and receive messages of class intermcu */
#ifndef _VAR_MESSAGES_intermcu_H_
#define _VAR_MESSAGES_intermcu_H_
#include "subsystems/datalink/transport.h"
#include "mcu_periph/link_device.h"
#define DL_IMCU_COMMANDS 1
#define PPRZ_MSG_ID_IMCU_COMMANDS 1
#define DL_IMCU_RADIO_COMMANDS 2
#define PPRZ_MSG_ID_IMCU_RADIO_COMMANDS 2
#define DL_MSG_intermcu_NB 2

#define DOWNLINK_SEND_IMCU_COMMANDS(_trans, _dev, status, nb_values, values) pprz_msg_send_IMCU_COMMANDS(&((_trans).trans_tx), &((_dev).device), AC_ID, status, nb_values, values)
static inline void pprz_msg_send_IMCU_COMMANDS(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_status, uint8_t nb_values, int16_t *_values) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+nb_values*2 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+nb_values*2 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1+nb_values*2 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMCU_COMMANDS, "IMCU_COMMANDS");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _status);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_values);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_ARRAY, 2 * nb_values, (void *) _values);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}

#define DOWNLINK_SEND_IMCU_RADIO_COMMANDS(_trans, _dev, status, nb_values, values) pprz_msg_send_IMCU_RADIO_COMMANDS(&((_trans).trans_tx), &((_dev).device), AC_ID, status, nb_values, values)
static inline void pprz_msg_send_IMCU_RADIO_COMMANDS(struct transport_tx *trans, struct link_device *dev, uint8_t ac_id, uint8_t *_status, uint8_t nb_values, int16_t *_values) {
	if (trans->check_available_space(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+nb_values*2 +2 /* msg header overhead */))) {
	  trans->count_bytes(trans->impl, dev, trans->size_of(trans->impl, 0+1+1+nb_values*2 +2 /* msg header overhead */));
	  trans->start_message(trans->impl, dev, 0+1+1+nb_values*2 +2 /* msg header overhead */);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, &ac_id);
	  trans->put_named_byte(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, DL_IMCU_RADIO_COMMANDS, "IMCU_RADIO_COMMANDS");
	  trans->put_bytes(trans->impl, dev, DL_TYPE_UINT8, DL_FORMAT_SCALAR, 1, (void *) _status);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_ARRAY_LENGTH, DL_FORMAT_SCALAR, 1, (void *) &nb_values);
	  trans->put_bytes(trans->impl, dev, DL_TYPE_INT16, DL_FORMAT_ARRAY, 2 * nb_values, (void *) _values);
	  trans->end_message(trans->impl, dev);
	} else
	  trans->overrun(trans->impl, dev);
}


#define DL_IMCU_COMMANDS_status(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_IMCU_COMMANDS_values_length(_payload) ((uint8_t)(*((uint8_t*)_payload+3)))
#define DL_IMCU_COMMANDS_values(_payload) ((int16_t*)(_payload+4))

#define DL_IMCU_RADIO_COMMANDS_status(_payload) ((uint8_t)(*((uint8_t*)_payload+2)))
#define DL_IMCU_RADIO_COMMANDS_values_length(_payload) ((uint8_t)(*((uint8_t*)_payload+3)))
#define DL_IMCU_RADIO_COMMANDS_values(_payload) ((int16_t*)(_payload+4))
#endif // _VAR_MESSAGES_intermcu_H_
