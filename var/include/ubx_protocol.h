/* Generated by gen_ubx from /home/rc/papa/conf/ubx.xml */
/* Please DO NOT EDIT */

#include "mcu_periph/link_device.h"

#include "subsystems/gps/gps_ubx.h"

#define UBX_SYNC1 0xB5
#define UBX_SYNC2 0x62

#define UBX_NAV_ID 0x01

#define UBX_NAV_POSLLH_ID 0x02
#define UBX_NAV_POSLLH_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_POSLLH_LON(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_POSLLH_LAT(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_POSLLH_HEIGHT(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_POSLLH_HMSL(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+16)|*((uint8_t*)_ubx_payload+1+16)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_POSLLH_Hacc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+20)|*((uint8_t*)_ubx_payload+1+20)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+20))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+20))<<24)
#define UBX_NAV_POSLLH_Vacc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+24)|*((uint8_t*)_ubx_payload+1+24)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+24))<<24)

static inline void UbxSend_NAV_POSLLH(struct link_device *dev, uint32_t ubx_itow, int32_t ubx_lon, int32_t ubx_lat, int32_t ubx_height, int32_t ubx_hmsl, uint32_t ubx_hacc, uint32_t ubx_vacc) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_POSLLH_ID, 28);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _lon = ubx_lon; ubx_send_bytes(dev, 4, (uint8_t*)&_lon);
  int32_t _lat = ubx_lat; ubx_send_bytes(dev, 4, (uint8_t*)&_lat);
  int32_t _height = ubx_height; ubx_send_bytes(dev, 4, (uint8_t*)&_height);
  int32_t _hmsl = ubx_hmsl; ubx_send_bytes(dev, 4, (uint8_t*)&_hmsl);
  uint32_t _hacc = ubx_hacc; ubx_send_bytes(dev, 4, (uint8_t*)&_hacc);
  uint32_t _vacc = ubx_vacc; ubx_send_bytes(dev, 4, (uint8_t*)&_vacc);
  ubx_trailer(dev);
}

#define UBX_NAV_DOP_ID 0x04
#define UBX_NAV_DOP_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_DOP_GDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8)
#define UBX_NAV_DOP_PDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+6)|*((uint8_t*)_ubx_payload+1+6)<<8)
#define UBX_NAV_DOP_TDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8)
#define UBX_NAV_DOP_VDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+10)|*((uint8_t*)_ubx_payload+1+10)<<8)
#define UBX_NAV_DOP_HDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8)
#define UBX_NAV_DOP_NDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+14)|*((uint8_t*)_ubx_payload+1+14)<<8)
#define UBX_NAV_DOP_EDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+16)|*((uint8_t*)_ubx_payload+1+16)<<8)

static inline void UbxSend_NAV_DOP(struct link_device *dev, uint32_t ubx_itow, uint16_t ubx_gdop, uint16_t ubx_pdop, uint16_t ubx_tdop, uint16_t ubx_vdop, uint16_t ubx_hdop, uint16_t ubx_ndop, uint16_t ubx_edop) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_DOP_ID, 18);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  uint16_t _gdop = ubx_gdop; ubx_send_bytes(dev, 2, (uint8_t*)&_gdop);
  uint16_t _pdop = ubx_pdop; ubx_send_bytes(dev, 2, (uint8_t*)&_pdop);
  uint16_t _tdop = ubx_tdop; ubx_send_bytes(dev, 2, (uint8_t*)&_tdop);
  uint16_t _vdop = ubx_vdop; ubx_send_bytes(dev, 2, (uint8_t*)&_vdop);
  uint16_t _hdop = ubx_hdop; ubx_send_bytes(dev, 2, (uint8_t*)&_hdop);
  uint16_t _ndop = ubx_ndop; ubx_send_bytes(dev, 2, (uint8_t*)&_ndop);
  uint16_t _edop = ubx_edop; ubx_send_bytes(dev, 2, (uint8_t*)&_edop);
  ubx_trailer(dev);
}

#define UBX_NAV_SOL_ID 0x06
#define UBX_NAV_SOL_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_SOL_Frac(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_SOL_week(_ubx_payload) (int16_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8)
#define UBX_NAV_SOL_GPSfix(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+10))
#define UBX_NAV_SOL_Flags(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+11))
#define UBX_NAV_SOL_ECEF_X(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_SOL_ECEF_Y(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+16)|*((uint8_t*)_ubx_payload+1+16)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_SOL_ECEF_Z(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+20)|*((uint8_t*)_ubx_payload+1+20)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+20))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+20))<<24)
#define UBX_NAV_SOL_Pacc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+24)|*((uint8_t*)_ubx_payload+1+24)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+24))<<24)
#define UBX_NAV_SOL_ECEFVX(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+28)|*((uint8_t*)_ubx_payload+1+28)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+28))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+28))<<24)
#define UBX_NAV_SOL_ECEFVY(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+32)|*((uint8_t*)_ubx_payload+1+32)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+32))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+32))<<24)
#define UBX_NAV_SOL_ECEFVZ(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+36)|*((uint8_t*)_ubx_payload+1+36)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+36))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+36))<<24)
#define UBX_NAV_SOL_Sacc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+40)|*((uint8_t*)_ubx_payload+1+40)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+40))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+40))<<24)
#define UBX_NAV_SOL_PDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+44)|*((uint8_t*)_ubx_payload+1+44)<<8)
#define UBX_NAV_SOL_res1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+46))
#define UBX_NAV_SOL_numSV(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+47))
#define UBX_NAV_SOL_res2(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+48)|*((uint8_t*)_ubx_payload+1+48)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+48))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+48))<<24)

static inline void UbxSend_NAV_SOL(struct link_device *dev, uint32_t ubx_itow, int32_t ubx_frac, int16_t ubx_week, uint8_t ubx_gpsfix, uint8_t ubx_flags, int32_t ubx_ecef_x, int32_t ubx_ecef_y, int32_t ubx_ecef_z, uint32_t ubx_pacc, int32_t ubx_ecefvx, int32_t ubx_ecefvy, int32_t ubx_ecefvz, uint32_t ubx_sacc, uint16_t ubx_pdop, uint8_t ubx_res1, uint8_t ubx_numsv, uint32_t ubx_res2) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_SOL_ID, 52);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _frac = ubx_frac; ubx_send_bytes(dev, 4, (uint8_t*)&_frac);
  int16_t _week = ubx_week; ubx_send_bytes(dev, 2, (uint8_t*)&_week);
  uint8_t _gpsfix = ubx_gpsfix; ubx_send_bytes(dev, 1, (uint8_t*)&_gpsfix);
  uint8_t _flags = ubx_flags; ubx_send_bytes(dev, 1, (uint8_t*)&_flags);
  int32_t _ecef_x = ubx_ecef_x; ubx_send_bytes(dev, 4, (uint8_t*)&_ecef_x);
  int32_t _ecef_y = ubx_ecef_y; ubx_send_bytes(dev, 4, (uint8_t*)&_ecef_y);
  int32_t _ecef_z = ubx_ecef_z; ubx_send_bytes(dev, 4, (uint8_t*)&_ecef_z);
  uint32_t _pacc = ubx_pacc; ubx_send_bytes(dev, 4, (uint8_t*)&_pacc);
  int32_t _ecefvx = ubx_ecefvx; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefvx);
  int32_t _ecefvy = ubx_ecefvy; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefvy);
  int32_t _ecefvz = ubx_ecefvz; ubx_send_bytes(dev, 4, (uint8_t*)&_ecefvz);
  uint32_t _sacc = ubx_sacc; ubx_send_bytes(dev, 4, (uint8_t*)&_sacc);
  uint16_t _pdop = ubx_pdop; ubx_send_bytes(dev, 2, (uint8_t*)&_pdop);
  uint8_t _res1 = ubx_res1; ubx_send_bytes(dev, 1, (uint8_t*)&_res1);
  uint8_t _numsv = ubx_numsv; ubx_send_bytes(dev, 1, (uint8_t*)&_numsv);
  uint32_t _res2 = ubx_res2; ubx_send_bytes(dev, 4, (uint8_t*)&_res2);
  ubx_trailer(dev);
}

#define UBX_NAV_POSUTM_ID 0x08
#define UBX_NAV_POSUTM_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_POSUTM_EAST(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_POSUTM_NORTH(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_POSUTM_ALT(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_POSUTM_ZONE(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+16))
#define UBX_NAV_POSUTM_HEM(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+17))

static inline void UbxSend_NAV_POSUTM(struct link_device *dev, uint32_t ubx_itow, int32_t ubx_east, int32_t ubx_north, int32_t ubx_alt, int8_t ubx_zone, int8_t ubx_hem) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_POSUTM_ID, 18);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _east = ubx_east; ubx_send_bytes(dev, 4, (uint8_t*)&_east);
  int32_t _north = ubx_north; ubx_send_bytes(dev, 4, (uint8_t*)&_north);
  int32_t _alt = ubx_alt; ubx_send_bytes(dev, 4, (uint8_t*)&_alt);
  int8_t _zone = ubx_zone; ubx_send_bytes(dev, 1, (uint8_t*)&_zone);
  int8_t _hem = ubx_hem; ubx_send_bytes(dev, 1, (uint8_t*)&_hem);
  ubx_trailer(dev);
}

#define UBX_NAV_STATUS_ID 0x03
#define UBX_NAV_STATUS_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_STATUS_GPSfix(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+4))
#define UBX_NAV_STATUS_Flags(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+5))
#define UBX_NAV_STATUS_DiffS(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+6))
#define UBX_NAV_STATUS_res(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+7))
#define UBX_NAV_STATUS_TTFF(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_STATUS_MSSS(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+12))<<24)

static inline void UbxSend_NAV_STATUS(struct link_device *dev, uint32_t ubx_itow, uint8_t ubx_gpsfix, uint8_t ubx_flags, uint8_t ubx_diffs, uint8_t ubx_res, uint32_t ubx_ttff, uint32_t ubx_msss) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_STATUS_ID, 16);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  uint8_t _gpsfix = ubx_gpsfix; ubx_send_bytes(dev, 1, (uint8_t*)&_gpsfix);
  uint8_t _flags = ubx_flags; ubx_send_bytes(dev, 1, (uint8_t*)&_flags);
  uint8_t _diffs = ubx_diffs; ubx_send_bytes(dev, 1, (uint8_t*)&_diffs);
  uint8_t _res = ubx_res; ubx_send_bytes(dev, 1, (uint8_t*)&_res);
  uint32_t _ttff = ubx_ttff; ubx_send_bytes(dev, 4, (uint8_t*)&_ttff);
  uint32_t _msss = ubx_msss; ubx_send_bytes(dev, 4, (uint8_t*)&_msss);
  ubx_trailer(dev);
}

#define UBX_NAV_VELNED_ID 0x12
#define UBX_NAV_VELNED_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_VELNED_VEL_N(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_NAV_VELNED_VEL_E(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_NAV_VELNED_VEL_D(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+12))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+12))<<24)
#define UBX_NAV_VELNED_Speed(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+16)|*((uint8_t*)_ubx_payload+1+16)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+16))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+16))<<24)
#define UBX_NAV_VELNED_GSpeed(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+20)|*((uint8_t*)_ubx_payload+1+20)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+20))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+20))<<24)
#define UBX_NAV_VELNED_Heading(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+24)|*((uint8_t*)_ubx_payload+1+24)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+24))<<24)
#define UBX_NAV_VELNED_SAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+28)|*((uint8_t*)_ubx_payload+1+28)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+28))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+28))<<24)
#define UBX_NAV_VELNED_CAcc(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+32)|*((uint8_t*)_ubx_payload+1+32)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+32))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+32))<<24)

static inline void UbxSend_NAV_VELNED(struct link_device *dev, uint32_t ubx_itow, int32_t ubx_vel_n, int32_t ubx_vel_e, int32_t ubx_vel_d, uint32_t ubx_speed, uint32_t ubx_gspeed, int32_t ubx_heading, uint32_t ubx_sacc, uint32_t ubx_cacc) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_VELNED_ID, 36);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int32_t _vel_n = ubx_vel_n; ubx_send_bytes(dev, 4, (uint8_t*)&_vel_n);
  int32_t _vel_e = ubx_vel_e; ubx_send_bytes(dev, 4, (uint8_t*)&_vel_e);
  int32_t _vel_d = ubx_vel_d; ubx_send_bytes(dev, 4, (uint8_t*)&_vel_d);
  uint32_t _speed = ubx_speed; ubx_send_bytes(dev, 4, (uint8_t*)&_speed);
  uint32_t _gspeed = ubx_gspeed; ubx_send_bytes(dev, 4, (uint8_t*)&_gspeed);
  int32_t _heading = ubx_heading; ubx_send_bytes(dev, 4, (uint8_t*)&_heading);
  uint32_t _sacc = ubx_sacc; ubx_send_bytes(dev, 4, (uint8_t*)&_sacc);
  uint32_t _cacc = ubx_cacc; ubx_send_bytes(dev, 4, (uint8_t*)&_cacc);
  ubx_trailer(dev);
}

#define UBX_NAV_SVINFO_ID 0x30
#define UBX_NAV_SVINFO_ITOW(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_NAV_SVINFO_NCH(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+4))
#define UBX_NAV_SVINFO_RES1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+5))
#define UBX_NAV_SVINFO_RES2(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+6)|*((uint8_t*)_ubx_payload+1+6)<<8)
#define UBX_NAV_SVINFO_chn(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+8+12*_ubx_block))
#define UBX_NAV_SVINFO_SVID(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+9+12*_ubx_block))
#define UBX_NAV_SVINFO_Flags(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+10+12*_ubx_block))
#define UBX_NAV_SVINFO_QI(_ubx_payload,_ubx_block) (int8_t)(*((uint8_t*)_ubx_payload+11+12*_ubx_block))
#define UBX_NAV_SVINFO_CNO(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+12+12*_ubx_block))
#define UBX_NAV_SVINFO_Elev(_ubx_payload,_ubx_block) (int8_t)(*((uint8_t*)_ubx_payload+13+12*_ubx_block))
#define UBX_NAV_SVINFO_Azim(_ubx_payload,_ubx_block) (int16_t)(*((uint8_t*)_ubx_payload+14+12*_ubx_block)|*((uint8_t*)_ubx_payload+1+14+12*_ubx_block)<<8)
#define UBX_NAV_SVINFO_PRRes(_ubx_payload,_ubx_block) (int32_t)(*((uint8_t*)_ubx_payload+16+12*_ubx_block)|*((uint8_t*)_ubx_payload+1+16+12*_ubx_block)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+16+12*_ubx_block))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+16+12*_ubx_block))<<24)

static inline void UbxSend_NAV_SVINFO(struct link_device *dev, uint32_t ubx_itow, uint8_t ubx_nch, uint8_t ubx_res1, uint16_t ubx_res2, uint8_t ubx_chn, uint8_t ubx_svid, uint8_t ubx_flags, int8_t ubx_qi, uint8_t ubx_cno, int8_t ubx_elev, int16_t ubx_azim, int32_t ubx_prres) {
  ubx_header(dev, UBX_NAV_ID, UBX_NAV_SVINFO_ID, 20);
  uint32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  uint8_t _nch = ubx_nch; ubx_send_bytes(dev, 1, (uint8_t*)&_nch);
  uint8_t _res1 = ubx_res1; ubx_send_bytes(dev, 1, (uint8_t*)&_res1);
  uint16_t _res2 = ubx_res2; ubx_send_bytes(dev, 2, (uint8_t*)&_res2);
  uint8_t _chn = ubx_chn; ubx_send_bytes(dev, 1, (uint8_t*)&_chn);
  uint8_t _svid = ubx_svid; ubx_send_bytes(dev, 1, (uint8_t*)&_svid);
  uint8_t _flags = ubx_flags; ubx_send_bytes(dev, 1, (uint8_t*)&_flags);
  int8_t _qi = ubx_qi; ubx_send_bytes(dev, 1, (uint8_t*)&_qi);
  uint8_t _cno = ubx_cno; ubx_send_bytes(dev, 1, (uint8_t*)&_cno);
  int8_t _elev = ubx_elev; ubx_send_bytes(dev, 1, (uint8_t*)&_elev);
  int16_t _azim = ubx_azim; ubx_send_bytes(dev, 2, (uint8_t*)&_azim);
  int32_t _prres = ubx_prres; ubx_send_bytes(dev, 4, (uint8_t*)&_prres);
  ubx_trailer(dev);
}

#define UBX_CFG_ID 0x06

#define UBX_CFG_PRT_ID 0x00
#define UBX_CFG_PRT_PortId(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+0+20*_ubx_block))
#define UBX_CFG_PRT_ReS0(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+1+20*_ubx_block))
#define UBX_CFG_PRT_ReS1(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+2+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+2+20*_ubx_block)<<8)
#define UBX_CFG_PRT_Mode(_ubx_payload,_ubx_block) (uint32_t)(*((uint8_t*)_ubx_payload+4+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+4+20*_ubx_block)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+4+20*_ubx_block))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+4+20*_ubx_block))<<24)
#define UBX_CFG_PRT_Baudrate(_ubx_payload,_ubx_block) (uint32_t)(*((uint8_t*)_ubx_payload+8+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+8+20*_ubx_block)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8+20*_ubx_block))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8+20*_ubx_block))<<24)
#define UBX_CFG_PRT_In_proto_mask(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+12+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+12+20*_ubx_block)<<8)
#define UBX_CFG_PRT_Out_proto_mask(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+14+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+14+20*_ubx_block)<<8)
#define UBX_CFG_PRT_Flags(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+16+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+16+20*_ubx_block)<<8)
#define UBX_CFG_PRT_Res2(_ubx_payload,_ubx_block) (uint16_t)(*((uint8_t*)_ubx_payload+18+20*_ubx_block)|*((uint8_t*)_ubx_payload+1+18+20*_ubx_block)<<8)

static inline void UbxSend_CFG_PRT(struct link_device *dev, uint8_t ubx_portid, uint8_t ubx_res0, uint16_t ubx_res1, uint32_t ubx_mode, uint32_t ubx_baudrate, uint16_t ubx_in_proto_mask, uint16_t ubx_out_proto_mask, uint16_t ubx_flags, uint16_t ubx_res2) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_PRT_ID, 20);
  uint8_t _portid = ubx_portid; ubx_send_bytes(dev, 1, (uint8_t*)&_portid);
  uint8_t _res0 = ubx_res0; ubx_send_bytes(dev, 1, (uint8_t*)&_res0);
  uint16_t _res1 = ubx_res1; ubx_send_bytes(dev, 2, (uint8_t*)&_res1);
  uint32_t _mode = ubx_mode; ubx_send_bytes(dev, 4, (uint8_t*)&_mode);
  uint32_t _baudrate = ubx_baudrate; ubx_send_bytes(dev, 4, (uint8_t*)&_baudrate);
  uint16_t _in_proto_mask = ubx_in_proto_mask; ubx_send_bytes(dev, 2, (uint8_t*)&_in_proto_mask);
  uint16_t _out_proto_mask = ubx_out_proto_mask; ubx_send_bytes(dev, 2, (uint8_t*)&_out_proto_mask);
  uint16_t _flags = ubx_flags; ubx_send_bytes(dev, 2, (uint8_t*)&_flags);
  uint16_t _res2 = ubx_res2; ubx_send_bytes(dev, 2, (uint8_t*)&_res2);
  ubx_trailer(dev);
}

#define UBX_CFG_PRT_POLL_ID 0x00

static inline void UbxSend_CFG_PRT_POLL(struct link_device *dev) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_PRT_POLL_ID, 0);
  ubx_trailer(dev);
}

#define UBX_CFG_MSG_ID 0x01
#define UBX_CFG_MSG_Class(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_CFG_MSG_MsgId(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_CFG_MSG_Rate(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))

static inline void UbxSend_CFG_MSG(struct link_device *dev, uint8_t ubx_class, uint8_t ubx_msgid, uint8_t ubx_rate) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_MSG_ID, 3);
  uint8_t _class = ubx_class; ubx_send_bytes(dev, 1, (uint8_t*)&_class);
  uint8_t _msgid = ubx_msgid; ubx_send_bytes(dev, 1, (uint8_t*)&_msgid);
  uint8_t _rate = ubx_rate; ubx_send_bytes(dev, 1, (uint8_t*)&_rate);
  ubx_trailer(dev);
}

#define UBX_CFG_NAV_ID 0x03
#define UBX_CFG_NAV_Platform(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_CFG_NAV_MinSvs(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_CFG_NAV_MaxSvs(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_CFG_NAV_MinCN0(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))
#define UBX_CFG_NAV_AbsCN0(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+4))
#define UBX_CFG_NAV_MinELE(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+5))
#define UBX_CFG_NAV_DGPSTTR(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+6))
#define UBX_CFG_NAV_DGPST0(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+7))
#define UBX_CFG_NAV_PRCAGE(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+8))
#define UBX_CFG_NAV_CPCAGE(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+9))
#define UBX_CFG_NAV_MinCLT(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+10)|*((uint8_t*)_ubx_payload+1+10)<<8)
#define UBX_CFG_NAV_AbsCLT(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+12)|*((uint8_t*)_ubx_payload+1+12)<<8)
#define UBX_CFG_NAV_MaxDR(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+14))
#define UBX_CFG_NAV_NAVOPT(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+15))
#define UBX_CFG_NAV_PDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+16)|*((uint8_t*)_ubx_payload+1+16)<<8)
#define UBX_CFG_NAV_TDOP(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+18)|*((uint8_t*)_ubx_payload+1+18)<<8)
#define UBX_CFG_NAV_PACC(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+20)|*((uint8_t*)_ubx_payload+1+20)<<8)
#define UBX_CFG_NAV_TACC(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+22)|*((uint8_t*)_ubx_payload+1+22)<<8)
#define UBX_CFG_NAV_FACC(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+24)|*((uint8_t*)_ubx_payload+1+24)<<8)
#define UBX_CFG_NAV_StaticThres(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+26))
#define UBX_CFG_NAV_reserved(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+27))

static inline void UbxSend_CFG_NAV(struct link_device *dev, uint8_t ubx_platform, uint8_t ubx_minsvs, uint8_t ubx_maxsvs, uint8_t ubx_mincn0, uint8_t ubx_abscn0, uint8_t ubx_minele, uint8_t ubx_dgpsttr, uint8_t ubx_dgpst0, uint8_t ubx_prcage, uint8_t ubx_cpcage, uint16_t ubx_minclt, uint16_t ubx_absclt, uint8_t ubx_maxdr, uint8_t ubx_navopt, uint16_t ubx_pdop, uint16_t ubx_tdop, uint16_t ubx_pacc, uint16_t ubx_tacc, uint16_t ubx_facc, uint8_t ubx_staticthres, uint8_t ubx_reserved) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_NAV_ID, 28);
  uint8_t _platform = ubx_platform; ubx_send_bytes(dev, 1, (uint8_t*)&_platform);
  uint8_t _minsvs = ubx_minsvs; ubx_send_bytes(dev, 1, (uint8_t*)&_minsvs);
  uint8_t _maxsvs = ubx_maxsvs; ubx_send_bytes(dev, 1, (uint8_t*)&_maxsvs);
  uint8_t _mincn0 = ubx_mincn0; ubx_send_bytes(dev, 1, (uint8_t*)&_mincn0);
  uint8_t _abscn0 = ubx_abscn0; ubx_send_bytes(dev, 1, (uint8_t*)&_abscn0);
  uint8_t _minele = ubx_minele; ubx_send_bytes(dev, 1, (uint8_t*)&_minele);
  uint8_t _dgpsttr = ubx_dgpsttr; ubx_send_bytes(dev, 1, (uint8_t*)&_dgpsttr);
  uint8_t _dgpst0 = ubx_dgpst0; ubx_send_bytes(dev, 1, (uint8_t*)&_dgpst0);
  uint8_t _prcage = ubx_prcage; ubx_send_bytes(dev, 1, (uint8_t*)&_prcage);
  uint8_t _cpcage = ubx_cpcage; ubx_send_bytes(dev, 1, (uint8_t*)&_cpcage);
  uint16_t _minclt = ubx_minclt; ubx_send_bytes(dev, 2, (uint8_t*)&_minclt);
  uint16_t _absclt = ubx_absclt; ubx_send_bytes(dev, 2, (uint8_t*)&_absclt);
  uint8_t _maxdr = ubx_maxdr; ubx_send_bytes(dev, 1, (uint8_t*)&_maxdr);
  uint8_t _navopt = ubx_navopt; ubx_send_bytes(dev, 1, (uint8_t*)&_navopt);
  uint16_t _pdop = ubx_pdop; ubx_send_bytes(dev, 2, (uint8_t*)&_pdop);
  uint16_t _tdop = ubx_tdop; ubx_send_bytes(dev, 2, (uint8_t*)&_tdop);
  uint16_t _pacc = ubx_pacc; ubx_send_bytes(dev, 2, (uint8_t*)&_pacc);
  uint16_t _tacc = ubx_tacc; ubx_send_bytes(dev, 2, (uint8_t*)&_tacc);
  uint16_t _facc = ubx_facc; ubx_send_bytes(dev, 2, (uint8_t*)&_facc);
  uint8_t _staticthres = ubx_staticthres; ubx_send_bytes(dev, 1, (uint8_t*)&_staticthres);
  uint8_t _reserved = ubx_reserved; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved);
  ubx_trailer(dev);
}

#define UBX_CFG_RST_ID 0x04
#define UBX_CFG_RST_nav_bbr(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8)
#define UBX_CFG_RST_Reset(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_CFG_RST_Res(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))

static inline void UbxSend_CFG_RST(struct link_device *dev, uint16_t ubx_nav_bbr, uint8_t ubx_reset, uint8_t ubx_res) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_RST_ID, 4);
  uint16_t _nav_bbr = ubx_nav_bbr; ubx_send_bytes(dev, 2, (uint8_t*)&_nav_bbr);
  uint8_t _reset = ubx_reset; ubx_send_bytes(dev, 1, (uint8_t*)&_reset);
  uint8_t _res = ubx_res; ubx_send_bytes(dev, 1, (uint8_t*)&_res);
  ubx_trailer(dev);
}

#define UBX_CFG_RATE_ID 0x08
#define UBX_CFG_RATE_Meas(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8)
#define UBX_CFG_RATE_Nav(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+2)|*((uint8_t*)_ubx_payload+1+2)<<8)
#define UBX_CFG_RATE_Time(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8)

static inline void UbxSend_CFG_RATE(struct link_device *dev, uint16_t ubx_meas, uint16_t ubx_nav, uint16_t ubx_time) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_RATE_ID, 6);
  uint16_t _meas = ubx_meas; ubx_send_bytes(dev, 2, (uint8_t*)&_meas);
  uint16_t _nav = ubx_nav; ubx_send_bytes(dev, 2, (uint8_t*)&_nav);
  uint16_t _time = ubx_time; ubx_send_bytes(dev, 2, (uint8_t*)&_time);
  ubx_trailer(dev);
}

#define UBX_CFG_CFG_ID 0x09
#define UBX_CFG_CFG_Clear_mask(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_CFG_CFG_Save_mask(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_CFG_CFG_Load_mask(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8))<<24)

static inline void UbxSend_CFG_CFG(struct link_device *dev, uint32_t ubx_clear_mask, uint32_t ubx_save_mask, uint32_t ubx_load_mask) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_CFG_ID, 12);
  uint32_t _clear_mask = ubx_clear_mask; ubx_send_bytes(dev, 4, (uint8_t*)&_clear_mask);
  uint32_t _save_mask = ubx_save_mask; ubx_send_bytes(dev, 4, (uint8_t*)&_save_mask);
  uint32_t _load_mask = ubx_load_mask; ubx_send_bytes(dev, 4, (uint8_t*)&_load_mask);
  ubx_trailer(dev);
}

#define UBX_CFG_SBAS_ID 0x16
#define UBX_CFG_SBAS_mode(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_CFG_SBAS_usage(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_CFG_SBAS_maxbas(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_CFG_SBAS_reserved(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))
#define UBX_CFG_SBAS_scanmode(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+4))<<24)

static inline void UbxSend_CFG_SBAS(struct link_device *dev, uint8_t ubx_mode, uint8_t ubx_usage, uint8_t ubx_maxbas, uint8_t ubx_reserved, uint32_t ubx_scanmode) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_SBAS_ID, 8);
  uint8_t _mode = ubx_mode; ubx_send_bytes(dev, 1, (uint8_t*)&_mode);
  uint8_t _usage = ubx_usage; ubx_send_bytes(dev, 1, (uint8_t*)&_usage);
  uint8_t _maxbas = ubx_maxbas; ubx_send_bytes(dev, 1, (uint8_t*)&_maxbas);
  uint8_t _reserved = ubx_reserved; ubx_send_bytes(dev, 1, (uint8_t*)&_reserved);
  uint32_t _scanmode = ubx_scanmode; ubx_send_bytes(dev, 4, (uint8_t*)&_scanmode);
  ubx_trailer(dev);
}

#define UBX_CFG_NAV5_ID 0x24
#define UBX_CFG_NAV5_mask(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8)
#define UBX_CFG_NAV5_dynModel(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+2))
#define UBX_CFG_NAV5_fixModel(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+3))
#define UBX_CFG_NAV5_fixedAlt(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+4))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+4))<<24)
#define UBX_CFG_NAV5_fixedAltVar(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+8)|*((uint8_t*)_ubx_payload+1+8)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+8))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+8))<<24)
#define UBX_CFG_NAV5_minElev(_ubx_payload) (int8_t)(*((uint8_t*)_ubx_payload+12))
#define UBX_CFG_NAV5_drLimit(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+13))
#define UBX_CFG_NAV5_dDop(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+14)|*((uint8_t*)_ubx_payload+1+14)<<8)
#define UBX_CFG_NAV5_tDop(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+16)|*((uint8_t*)_ubx_payload+1+16)<<8)
#define UBX_CFG_NAV5_pAcc(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+18)|*((uint8_t*)_ubx_payload+1+18)<<8)
#define UBX_CFG_NAV5_tAcc(_ubx_payload) (uint16_t)(*((uint8_t*)_ubx_payload+20)|*((uint8_t*)_ubx_payload+1+20)<<8)
#define UBX_CFG_NAV5_staticHoldThresh(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+22))
#define UBX_CFG_NAV5_res1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+23))
#define UBX_CFG_NAV5_res2(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+24)|*((uint8_t*)_ubx_payload+1+24)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+24))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+24))<<24)
#define UBX_CFG_NAV5_res3(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+28)|*((uint8_t*)_ubx_payload+1+28)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+28))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+28))<<24)
#define UBX_CFG_NAV5_res4(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+32)|*((uint8_t*)_ubx_payload+1+32)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+32))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+32))<<24)

static inline void UbxSend_CFG_NAV5(struct link_device *dev, uint16_t ubx_mask, uint8_t ubx_dynmodel, uint8_t ubx_fixmodel, int32_t ubx_fixedalt, uint32_t ubx_fixedaltvar, int8_t ubx_minelev, uint8_t ubx_drlimit, uint16_t ubx_ddop, uint16_t ubx_tdop, uint16_t ubx_pacc, uint16_t ubx_tacc, uint8_t ubx_staticholdthresh, uint8_t ubx_res1, uint32_t ubx_res2, uint32_t ubx_res3, uint32_t ubx_res4) {
  ubx_header(dev, UBX_CFG_ID, UBX_CFG_NAV5_ID, 36);
  uint16_t _mask = ubx_mask; ubx_send_bytes(dev, 2, (uint8_t*)&_mask);
  uint8_t _dynmodel = ubx_dynmodel; ubx_send_bytes(dev, 1, (uint8_t*)&_dynmodel);
  uint8_t _fixmodel = ubx_fixmodel; ubx_send_bytes(dev, 1, (uint8_t*)&_fixmodel);
  int32_t _fixedalt = ubx_fixedalt; ubx_send_bytes(dev, 4, (uint8_t*)&_fixedalt);
  uint32_t _fixedaltvar = ubx_fixedaltvar; ubx_send_bytes(dev, 4, (uint8_t*)&_fixedaltvar);
  int8_t _minelev = ubx_minelev; ubx_send_bytes(dev, 1, (uint8_t*)&_minelev);
  uint8_t _drlimit = ubx_drlimit; ubx_send_bytes(dev, 1, (uint8_t*)&_drlimit);
  uint16_t _ddop = ubx_ddop; ubx_send_bytes(dev, 2, (uint8_t*)&_ddop);
  uint16_t _tdop = ubx_tdop; ubx_send_bytes(dev, 2, (uint8_t*)&_tdop);
  uint16_t _pacc = ubx_pacc; ubx_send_bytes(dev, 2, (uint8_t*)&_pacc);
  uint16_t _tacc = ubx_tacc; ubx_send_bytes(dev, 2, (uint8_t*)&_tacc);
  uint8_t _staticholdthresh = ubx_staticholdthresh; ubx_send_bytes(dev, 1, (uint8_t*)&_staticholdthresh);
  uint8_t _res1 = ubx_res1; ubx_send_bytes(dev, 1, (uint8_t*)&_res1);
  uint32_t _res2 = ubx_res2; ubx_send_bytes(dev, 4, (uint8_t*)&_res2);
  uint32_t _res3 = ubx_res3; ubx_send_bytes(dev, 4, (uint8_t*)&_res3);
  uint32_t _res4 = ubx_res4; ubx_send_bytes(dev, 4, (uint8_t*)&_res4);
  ubx_trailer(dev);
}

#define UBX_ACK_ID 0x05

#define UBX_ACK_ACK_ID 0x01
#define UBX_ACK_ACK_ClsID(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_ACK_ACK_MsgID(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))

static inline void UbxSend_ACK_ACK(struct link_device *dev, uint8_t ubx_clsid, uint8_t ubx_msgid) {
  ubx_header(dev, UBX_ACK_ID, UBX_ACK_ACK_ID, 2);
  uint8_t _clsid = ubx_clsid; ubx_send_bytes(dev, 1, (uint8_t*)&_clsid);
  uint8_t _msgid = ubx_msgid; ubx_send_bytes(dev, 1, (uint8_t*)&_msgid);
  ubx_trailer(dev);
}

#define UBX_ACK_NAK_ID 0x00
#define UBX_ACK_NAK_ClsID(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_ACK_NAK_MsgID(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))

static inline void UbxSend_ACK_NAK(struct link_device *dev, uint8_t ubx_clsid, uint8_t ubx_msgid) {
  ubx_header(dev, UBX_ACK_ID, UBX_ACK_NAK_ID, 2);
  uint8_t _clsid = ubx_clsid; ubx_send_bytes(dev, 1, (uint8_t*)&_clsid);
  uint8_t _msgid = ubx_msgid; ubx_send_bytes(dev, 1, (uint8_t*)&_msgid);
  ubx_trailer(dev);
}

#define UBX_RXM_ID 0x02

#define UBX_RXM_RAW_ID 0x10
#define UBX_RXM_RAW_iTOW(_ubx_payload) (int32_t)(*((uint8_t*)_ubx_payload+0)|*((uint8_t*)_ubx_payload+1+0)<<8|((int32_t)*((uint8_t*)_ubx_payload+2+0))<<16|((int32_t)*((uint8_t*)_ubx_payload+3+0))<<24)
#define UBX_RXM_RAW_week(_ubx_payload) (int16_t)(*((uint8_t*)_ubx_payload+4)|*((uint8_t*)_ubx_payload+1+4)<<8)
#define UBX_RXM_RAW_numSV(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+6))
#define UBX_RXM_RAW_reserverd1(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+7))
#define UBX_RXM_RAW_cpMes(_ubx_payload,_ubx_block) ({ union { uint64_t u; double f; } _f; _f.u = (uint64_t)(*((uint8_t*)_ubx_payload+8+24*_ubx_block)|((uint64_t)*((uint8_t*)_ubx_payload+1+8+24*_ubx_block))<<8|((uint64_t)*((uint8_t*)_ubx_payload+2+8+24*_ubx_block))<<16|((uint64_t)*((uint8_t*)_ubx_payload+3+8+24*_ubx_block))<<24|((uint64_t)*((uint8_t*)_ubx_payload+4+8+24*_ubx_block))<<32|((uint64_t)*((uint8_t*)_ubx_payload+5+8+24*_ubx_block))<<40|((uint64_t)*((uint8_t*)_ubx_payload+6+8+24*_ubx_block))<<48|((uint64_t)*((uint8_t*)_ubx_payload+7+8+24*_ubx_block))<<56); /*Swap32IfBigEndian(_f.u)*/; _f.f; })
#define UBX_RXM_RAW_prMes(_ubx_payload,_ubx_block) ({ union { uint64_t u; double f; } _f; _f.u = (uint64_t)(*((uint8_t*)_ubx_payload+16+24*_ubx_block)|((uint64_t)*((uint8_t*)_ubx_payload+1+16+24*_ubx_block))<<8|((uint64_t)*((uint8_t*)_ubx_payload+2+16+24*_ubx_block))<<16|((uint64_t)*((uint8_t*)_ubx_payload+3+16+24*_ubx_block))<<24|((uint64_t)*((uint8_t*)_ubx_payload+4+16+24*_ubx_block))<<32|((uint64_t)*((uint8_t*)_ubx_payload+5+16+24*_ubx_block))<<40|((uint64_t)*((uint8_t*)_ubx_payload+6+16+24*_ubx_block))<<48|((uint64_t)*((uint8_t*)_ubx_payload+7+16+24*_ubx_block))<<56); /*Swap32IfBigEndian(_f.u)*/; _f.f; })
#define UBX_RXM_RAW_doMes(_ubx_payload,_ubx_block) ({ union { uint32_t u; float f; } _f; _f.u = (uint32_t)(*((uint8_t*)_ubx_payload+24+24*_ubx_block)|*((uint8_t*)_ubx_payload+1+24+24*_ubx_block)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+24+24*_ubx_block))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+24+24*_ubx_block))<<24); _f.f; })
#define UBX_RXM_RAW_sv(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+28+24*_ubx_block))
#define UBX_RXM_RAW_mesQI(_ubx_payload,_ubx_block) (int8_t)(*((uint8_t*)_ubx_payload+29+24*_ubx_block))
#define UBX_RXM_RAW_cno(_ubx_payload,_ubx_block) (int8_t)(*((uint8_t*)_ubx_payload+30+24*_ubx_block))
#define UBX_RXM_RAW_lli(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+31+24*_ubx_block))

static inline void UbxSend_RXM_RAW(struct link_device *dev, int32_t ubx_itow, int16_t ubx_week, uint8_t ubx_numsv, uint8_t ubx_reserverd1, double ubx_cpmes, double ubx_prmes, float ubx_domes, uint8_t ubx_sv, int8_t ubx_mesqi, int8_t ubx_cno, uint8_t ubx_lli) {
  ubx_header(dev, UBX_RXM_ID, UBX_RXM_RAW_ID, 32);
  int32_t _itow = ubx_itow; ubx_send_bytes(dev, 4, (uint8_t*)&_itow);
  int16_t _week = ubx_week; ubx_send_bytes(dev, 2, (uint8_t*)&_week);
  uint8_t _numsv = ubx_numsv; ubx_send_bytes(dev, 1, (uint8_t*)&_numsv);
  uint8_t _reserverd1 = ubx_reserverd1; ubx_send_bytes(dev, 1, (uint8_t*)&_reserverd1);
  double _cpmes = ubx_cpmes; ubx_send_bytes(dev, 8, (uint8_t*)&_cpmes);
  double _prmes = ubx_prmes; ubx_send_bytes(dev, 8, (uint8_t*)&_prmes);
  float _domes = ubx_domes; ubx_send_bytes(dev, 4, (uint8_t*)&_domes);
  uint8_t _sv = ubx_sv; ubx_send_bytes(dev, 1, (uint8_t*)&_sv);
  int8_t _mesqi = ubx_mesqi; ubx_send_bytes(dev, 1, (uint8_t*)&_mesqi);
  int8_t _cno = ubx_cno; ubx_send_bytes(dev, 1, (uint8_t*)&_cno);
  uint8_t _lli = ubx_lli; ubx_send_bytes(dev, 1, (uint8_t*)&_lli);
  ubx_trailer(dev);
}

#define UBX_RXM_SFRB_ID 0x11
#define UBX_RXM_SFRB_chn(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+0))
#define UBX_RXM_SFRB_svid(_ubx_payload) (uint8_t)(*((uint8_t*)_ubx_payload+1))
#define UBX_RXM_SFRB_dwrd0(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+2)|*((uint8_t*)_ubx_payload+1+2)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+2))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+2))<<24)
#define UBX_RXM_SFRB_dwrd1(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+6)|*((uint8_t*)_ubx_payload+1+6)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+6))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+6))<<24)
#define UBX_RXM_SFRB_dwrd2(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+10)|*((uint8_t*)_ubx_payload+1+10)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+10))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+10))<<24)
#define UBX_RXM_SFRB_dwrd3(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+14)|*((uint8_t*)_ubx_payload+1+14)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+14))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+14))<<24)
#define UBX_RXM_SFRB_dwrd4(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+18)|*((uint8_t*)_ubx_payload+1+18)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+18))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+18))<<24)
#define UBX_RXM_SFRB_dwrd5(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+22)|*((uint8_t*)_ubx_payload+1+22)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+22))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+22))<<24)
#define UBX_RXM_SFRB_dwrd6(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+26)|*((uint8_t*)_ubx_payload+1+26)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+26))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+26))<<24)
#define UBX_RXM_SFRB_dwrd7(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+30)|*((uint8_t*)_ubx_payload+1+30)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+30))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+30))<<24)
#define UBX_RXM_SFRB_dwrd8(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+34)|*((uint8_t*)_ubx_payload+1+34)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+34))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+34))<<24)
#define UBX_RXM_SFRB_dwrd9(_ubx_payload) (uint32_t)(*((uint8_t*)_ubx_payload+38)|*((uint8_t*)_ubx_payload+1+38)<<8|((uint32_t)*((uint8_t*)_ubx_payload+2+38))<<16|((uint32_t)*((uint8_t*)_ubx_payload+3+38))<<24)

static inline void UbxSend_RXM_SFRB(struct link_device *dev, uint8_t ubx_chn, uint8_t ubx_svid, uint32_t ubx_dwrd0, uint32_t ubx_dwrd1, uint32_t ubx_dwrd2, uint32_t ubx_dwrd3, uint32_t ubx_dwrd4, uint32_t ubx_dwrd5, uint32_t ubx_dwrd6, uint32_t ubx_dwrd7, uint32_t ubx_dwrd8, uint32_t ubx_dwrd9) {
  ubx_header(dev, UBX_RXM_ID, UBX_RXM_SFRB_ID, 42);
  uint8_t _chn = ubx_chn; ubx_send_bytes(dev, 1, (uint8_t*)&_chn);
  uint8_t _svid = ubx_svid; ubx_send_bytes(dev, 1, (uint8_t*)&_svid);
  uint32_t _dwrd0 = ubx_dwrd0; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd0);
  uint32_t _dwrd1 = ubx_dwrd1; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd1);
  uint32_t _dwrd2 = ubx_dwrd2; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd2);
  uint32_t _dwrd3 = ubx_dwrd3; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd3);
  uint32_t _dwrd4 = ubx_dwrd4; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd4);
  uint32_t _dwrd5 = ubx_dwrd5; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd5);
  uint32_t _dwrd6 = ubx_dwrd6; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd6);
  uint32_t _dwrd7 = ubx_dwrd7; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd7);
  uint32_t _dwrd8 = ubx_dwrd8; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd8);
  uint32_t _dwrd9 = ubx_dwrd9; ubx_send_bytes(dev, 4, (uint8_t*)&_dwrd9);
  ubx_trailer(dev);
}

#define UBX_MON_ID 0x0A

#define UBX_MON_GET_VER_ID 0x04

static inline void UbxSend_MON_GET_VER(struct link_device *dev) {
  ubx_header(dev, UBX_MON_ID, UBX_MON_GET_VER_ID, 0);
  ubx_trailer(dev);
}

#define UBX_MON_VER_ID 0x04
#define UBX_MON_VER_c(_ubx_payload,_ubx_block) (uint8_t)(*((uint8_t*)_ubx_payload+0+1*_ubx_block))

static inline void UbxSend_MON_VER(struct link_device *dev, uint8_t ubx_c) {
  ubx_header(dev, UBX_MON_ID, UBX_MON_VER_ID, 1);
  uint8_t _c = ubx_c; ubx_send_bytes(dev, 1, (uint8_t*)&_c);
  ubx_trailer(dev);
}
