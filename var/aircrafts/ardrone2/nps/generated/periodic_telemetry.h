/* This file has been generated by gen_periodic from /home/rc/papa/conf/messages.xml and /home/rc/papa/conf/telemetry/default_rotorcraft.xml */
/* Version v5.8.2_stable-1-g22dabc7-dirty */
/* Please DO NOT EDIT */

#ifndef _VAR_PERIODIC_H_
#define _VAR_PERIODIC_H_

#include "std.h"
#include "generated/airframe.h"
#include "subsystems/datalink/telemetry_common.h"

#define TELEMETRY_FREQUENCY 512

/* Periodic telemetry messages of type PPRZ */
#define TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX 0
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX 1
#define TELEMETRY_PPRZ_MSG_FILTER_ALIGNER_IDX 2
#define TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_REF_INT_IDX 3
#define TELEMETRY_PPRZ_MSG_GUIDANCE_H_INT_IDX 4
#define TELEMETRY_PPRZ_MSG_HFF_IDX 5
#define TELEMETRY_PPRZ_MSG_GEO_MAG_IDX 6
#define TELEMETRY_PPRZ_MSG_IMU_ACCEL_SCALED_IDX 7
#define TELEMETRY_PPRZ_MSG_PPM_IDX 8
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_RADIO_CONTROL_IDX 9
#define TELEMETRY_PPRZ_MSG_AIR_DATA_IDX 10
#define TELEMETRY_PPRZ_MSG_VFF_IDX 11
#define TELEMETRY_PPRZ_MSG_OPTIC_FLOW_EST_IDX 12
#define TELEMETRY_PPRZ_MSG_I2C_ERRORS_IDX 13
#define TELEMETRY_PPRZ_MSG_AHRS_EULER_IDX 14
#define TELEMETRY_PPRZ_MSG_ENERGY_IDX 15
#define TELEMETRY_PPRZ_MSG_AHRS_EULER_INT_IDX 16
#define TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX 17
#define TELEMETRY_PPRZ_MSG_VERT_LOOP_IDX 18
#define TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX 19
#define TELEMETRY_PPRZ_MSG_UART_ERRORS_IDX 20
#define TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_REF_FLOAT_IDX 21
#define TELEMETRY_PPRZ_MSG_BARO_RAW_IDX 22
#define TELEMETRY_PPRZ_MSG_INS_IDX 23
#define TELEMETRY_PPRZ_MSG_FILTER_IDX 24
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_CAM_IDX 25
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX 26
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX 27
#define TELEMETRY_PPRZ_MSG_HFF_GPS_IDX 28
#define TELEMETRY_PPRZ_MSG_VFF_EXTENDED_IDX 29
#define TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_FLOAT_IDX 30
#define TELEMETRY_PPRZ_MSG_AHRS_REF_QUAT_IDX 31
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_TUNE_HOVER_IDX 32
#define TELEMETRY_PPRZ_MSG_IMU_MAG_SCALED_IDX 33
#define TELEMETRY_PPRZ_MSG_SUPERBITRF_IDX 34
#define TELEMETRY_PPRZ_MSG_RC_IDX 35
#define TELEMETRY_PPRZ_MSG_ROTORCRAFT_CMD_IDX 36
#define TELEMETRY_PPRZ_MSG_WP_MOVED_IDX 37
#define TELEMETRY_PPRZ_MSG_GUIDANCE_H_REF_INT_IDX 38
#define TELEMETRY_PPRZ_MSG_RATE_LOOP_IDX 39
#define TELEMETRY_PPRZ_MSG_HFF_DBG_IDX 40
#define TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX 41
#define TELEMETRY_PPRZ_MSG_ARDRONE_NAVDATA_IDX 42
#define TELEMETRY_PPRZ_MSG_GPS_INT_IDX 43
#define TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INT_IDX 44
#define TELEMETRY_PPRZ_MSG_SURVEY_IDX 45
#define TELEMETRY_PPRZ_MSG_HOVER_LOOP_IDX 46
#define TELEMETRY_PPRZ_MSG_VECTORNAV_INFO_IDX 47
#define TELEMETRY_PPRZ_MSG_AHRS_GYRO_BIAS_INT_IDX 48
#define TELEMETRY_PPRZ_MSG_IMU_GYRO_SCALED_IDX 49
#define TELEMETRY_PPRZ_MSG_INS_Z_IDX 50
#define TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX 51
#define TELEMETRY_PPRZ_MSG_ALIVE_IDX 52
#define TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX 53
#define TELEMETRY_PPRZ_MSG_DL_VALUE_IDX 54
#define TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INDI_IDX 55
#define TELEMETRY_PPRZ_MSG_AHRS_QUAT_INT_IDX 56
#define TELEMETRY_PPRZ_MSG_BEBOP_ACTUATORS_IDX 57
#define TELEMETRY_PPRZ_MSG_INS_REF_IDX 58
#define TELEMETRY_PPRZ_NB_MSG 59

#define TELEMETRY_PPRZ_MSG_NAMES { \
  "IMU_ACCEL_RAW", \
  "ROTORCRAFT_STATUS", \
  "FILTER_ALIGNER", \
  "STAB_ATTITUDE_REF_INT", \
  "GUIDANCE_H_INT", \
  "HFF", \
  "GEO_MAG", \
  "IMU_ACCEL_SCALED", \
  "PPM", \
  "ROTORCRAFT_RADIO_CONTROL", \
  "AIR_DATA", \
  "VFF", \
  "OPTIC_FLOW_EST", \
  "I2C_ERRORS", \
  "AHRS_EULER", \
  "ENERGY", \
  "AHRS_EULER_INT", \
  "AUTOPILOT_VERSION", \
  "VERT_LOOP", \
  "STATE_FILTER_STATUS", \
  "UART_ERRORS", \
  "STAB_ATTITUDE_REF_FLOAT", \
  "BARO_RAW", \
  "INS", \
  "FILTER", \
  "ROTORCRAFT_CAM", \
  "ROTORCRAFT_NAV_STATUS", \
  "ROTORCRAFT_FP", \
  "HFF_GPS", \
  "VFF_EXTENDED", \
  "STAB_ATTITUDE_FLOAT", \
  "AHRS_REF_QUAT", \
  "ROTORCRAFT_TUNE_HOVER", \
  "IMU_MAG_SCALED", \
  "SUPERBITRF", \
  "RC", \
  "ROTORCRAFT_CMD", \
  "WP_MOVED", \
  "GUIDANCE_H_REF_INT", \
  "RATE_LOOP", \
  "HFF_DBG", \
  "IMU_GYRO_RAW", \
  "ARDRONE_NAVDATA", \
  "GPS_INT", \
  "STAB_ATTITUDE_INT", \
  "SURVEY", \
  "HOVER_LOOP", \
  "VECTORNAV_INFO", \
  "AHRS_GYRO_BIAS_INT", \
  "IMU_GYRO_SCALED", \
  "INS_Z", \
  "IMU_MAG_RAW", \
  "ALIVE", \
  "DATALINK_REPORT", \
  "DL_VALUE", \
  "STAB_ATTITUDE_INDI", \
  "AHRS_QUAT_INT", \
  "BEBOP_ACTUATORS", \
  "INS_REF", \
}

#define TELEMETRY_PPRZ_CBS { \
  {.id=PPRZ_MSG_ID_IMU_ACCEL_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_STATUS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_FILTER_ALIGNER, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STAB_ATTITUDE_REF_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_GUIDANCE_H_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_HFF, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_GEO_MAG, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_ACCEL_SCALED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_PPM, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_RADIO_CONTROL, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AIR_DATA, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_VFF, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_OPTIC_FLOW_EST, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_I2C_ERRORS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AHRS_EULER, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ENERGY, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AHRS_EULER_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AUTOPILOT_VERSION, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_VERT_LOOP, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STATE_FILTER_STATUS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_UART_ERRORS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STAB_ATTITUDE_REF_FLOAT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_BARO_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_INS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_FILTER, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_CAM, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_NAV_STATUS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_FP, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_HFF_GPS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_VFF_EXTENDED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STAB_ATTITUDE_FLOAT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AHRS_REF_QUAT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_TUNE_HOVER, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_MAG_SCALED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_SUPERBITRF, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_RC, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ROTORCRAFT_CMD, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_WP_MOVED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_GUIDANCE_H_REF_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_RATE_LOOP, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_HFF_DBG, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_GYRO_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ARDRONE_NAVDATA, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_GPS_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STAB_ATTITUDE_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_SURVEY, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_HOVER_LOOP, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_VECTORNAV_INFO, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AHRS_GYRO_BIAS_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_GYRO_SCALED, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_INS_Z, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_IMU_MAG_RAW, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_ALIVE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_DATALINK_REPORT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_DL_VALUE, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_STAB_ATTITUDE_INDI, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_AHRS_QUAT_INT, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_BEBOP_ACTUATORS, .slots={ NULL }}, \
  {.id=PPRZ_MSG_ID_INS_REF, .slots={ NULL }}, \
}


/* Periodic telemetry (type PPRZ): Main process */
#define TELEMETRY_PROCESS_Main 0
#define TELEMETRY_MODE_Main_default 0
#define PERIOD_AUTOPILOT_VERSION_Main_0 (11.1)
#define PERIOD_DL_VALUE_Main_0 (1.1)
#define PERIOD_ROTORCRAFT_STATUS_Main_0 (1.2)
#define PERIOD_ROTORCRAFT_FP_Main_0 (0.25)
#define PERIOD_ALIVE_Main_0 (2.1)
#define PERIOD_INS_REF_Main_0 (5.1)
#define PERIOD_ROTORCRAFT_NAV_STATUS_Main_0 (1.6)
#define PERIOD_WP_MOVED_Main_0 (1.3)
#define PERIOD_ROTORCRAFT_CAM_Main_0 (1.)
#define PERIOD_GPS_INT_Main_0 (.25)
#define PERIOD_INS_Main_0 (.25)
#define PERIOD_I2C_ERRORS_Main_0 (4.1)
#define PERIOD_UART_ERRORS_Main_0 (3.1)
#define PERIOD_SUPERBITRF_Main_0 (3)
#define PERIOD_ENERGY_Main_0 (2.5)
#define PERIOD_DATALINK_REPORT_Main_0 (5.1)
#define PERIOD_STATE_FILTER_STATUS_Main_0 (3.2)
#define PERIOD_AIR_DATA_Main_0 (1.3)
#define PERIOD_SURVEY_Main_0 (2.5)
#define PERIOD_OPTIC_FLOW_EST_Main_0 (0.25)
#define PERIOD_VECTORNAV_INFO_Main_0 (0.5)
#define TELEMETRY_MODE_Main_ppm 1
#define PERIOD_DL_VALUE_Main_1 (0.5)
#define PERIOD_ALIVE_Main_1 (2.1)
#define PERIOD_ROTORCRAFT_CMD_Main_1 (.05)
#define PERIOD_PPM_Main_1 (0.5)
#define PERIOD_RC_Main_1 (0.5)
#define PERIOD_ROTORCRAFT_RADIO_CONTROL_Main_1 (0.5)
#define PERIOD_ROTORCRAFT_STATUS_Main_1 (1)
#define PERIOD_BEBOP_ACTUATORS_Main_1 (0.2)
#define TELEMETRY_MODE_Main_raw_sensors 2
#define PERIOD_ROTORCRAFT_STATUS_Main_2 (1.2)
#define PERIOD_DL_VALUE_Main_2 (0.5)
#define PERIOD_ALIVE_Main_2 (2.1)
#define PERIOD_IMU_ACCEL_RAW_Main_2 (.05)
#define PERIOD_IMU_GYRO_RAW_Main_2 (.05)
#define PERIOD_IMU_MAG_RAW_Main_2 (.05)
#define PERIOD_BARO_RAW_Main_2 (.1)
#define PERIOD_ARDRONE_NAVDATA_Main_2 (.05)
#define TELEMETRY_MODE_Main_scaled_sensors 3
#define PERIOD_ROTORCRAFT_STATUS_Main_3 (1.2)
#define PERIOD_DL_VALUE_Main_3 (0.5)
#define PERIOD_ALIVE_Main_3 (2.1)
#define PERIOD_IMU_GYRO_SCALED_Main_3 (.075)
#define PERIOD_IMU_ACCEL_SCALED_Main_3 (.075)
#define PERIOD_IMU_MAG_SCALED_Main_3 (.1)
#define TELEMETRY_MODE_Main_ahrs 4
#define PERIOD_ROTORCRAFT_STATUS_Main_4 (1.2)
#define PERIOD_DL_VALUE_Main_4 (0.5)
#define PERIOD_ALIVE_Main_4 (2.1)
#define PERIOD_FILTER_ALIGNER_Main_4 (2.2)
#define PERIOD_FILTER_Main_4 (.5)
#define PERIOD_GEO_MAG_Main_4 (5.)
#define PERIOD_AHRS_GYRO_BIAS_INT_Main_4 (0.08)
#define PERIOD_AHRS_QUAT_INT_Main_4 (.25)
#define PERIOD_AHRS_EULER_INT_Main_4 (.1)
#define PERIOD_AHRS_EULER_Main_4 (.1)
#define TELEMETRY_MODE_Main_rate_loop 5
#define PERIOD_ROTORCRAFT_STATUS_Main_5 (1.2)
#define PERIOD_DL_VALUE_Main_5 (0.5)
#define PERIOD_ALIVE_Main_5 (2.1)
#define PERIOD_RATE_LOOP_Main_5 (.02)
#define TELEMETRY_MODE_Main_attitude_setpoint_viz 6
#define PERIOD_ROTORCRAFT_STATUS_Main_6 (1.2)
#define PERIOD_DL_VALUE_Main_6 (0.5)
#define PERIOD_ALIVE_Main_6 (0.9)
#define PERIOD_ROTORCRAFT_RADIO_CONTROL_Main_6 (0.1)
#define PERIOD_AHRS_REF_QUAT_Main_6 (0.05)
#define TELEMETRY_MODE_Main_attitude_loop 7
#define PERIOD_ROTORCRAFT_STATUS_Main_7 (1.2)
#define PERIOD_DL_VALUE_Main_7 (0.5)
#define PERIOD_ALIVE_Main_7 (0.9)
#define PERIOD_STAB_ATTITUDE_INT_Main_7 (.03)
#define PERIOD_STAB_ATTITUDE_REF_INT_Main_7 (.03)
#define PERIOD_STAB_ATTITUDE_FLOAT_Main_7 (.03)
#define PERIOD_STAB_ATTITUDE_REF_FLOAT_Main_7 (.03)
#define PERIOD_STAB_ATTITUDE_INDI_Main_7 (.25)
#define TELEMETRY_MODE_Main_vert_loop 8
#define PERIOD_ROTORCRAFT_STATUS_Main_8 (1.2)
#define PERIOD_DL_VALUE_Main_8 (0.5)
#define PERIOD_ALIVE_Main_8 (0.9)
#define PERIOD_VFF_Main_8 (.05)
#define PERIOD_VFF_EXTENDED_Main_8 (.05)
#define PERIOD_VERT_LOOP_Main_8 (.05)
#define PERIOD_INS_Z_Main_8 (.05)
#define PERIOD_INS_Main_8 (.11)
#define PERIOD_INS_REF_Main_8 (5.1)
#define TELEMETRY_MODE_Main_h_loop 9
#define PERIOD_ALIVE_Main_9 (0.9)
#define PERIOD_HOVER_LOOP_Main_9 (0.062)
#define PERIOD_GUIDANCE_H_REF_INT_Main_9 (0.062)
#define PERIOD_STAB_ATTITUDE_INT_Main_9 (0.4)
#define PERIOD_STAB_ATTITUDE_FLOAT_Main_9 (0.4)
#define PERIOD_ROTORCRAFT_FP_Main_9 (0.8)
#define PERIOD_ROTORCRAFT_STATUS_Main_9 (1.2)
#define PERIOD_ROTORCRAFT_NAV_STATUS_Main_9 (1.6)
#define PERIOD_INS_REF_Main_9 (5.1)
#define PERIOD_HFF_Main_9 (.05)
#define PERIOD_HFF_GPS_Main_9 (.03)
#define PERIOD_HFF_DBG_Main_9 (.2)
#define TELEMETRY_MODE_Main_aligner 10
#define PERIOD_ALIVE_Main_10 (0.9)
#define PERIOD_FILTER_ALIGNER_Main_10 (0.02)
#define TELEMETRY_MODE_Main_tune_hover 11
#define PERIOD_DL_VALUE_Main_11 (1.1)
#define PERIOD_ROTORCRAFT_STATUS_Main_11 (1.2)
#define PERIOD_ALIVE_Main_11 (2.1)
#define PERIOD_GUIDANCE_H_INT_Main_11 (0.05)
#define PERIOD_ROTORCRAFT_TUNE_HOVER_Main_11 (.1)
#define PERIOD_INS_REF_Main_11 (5.1)

/* Functions for Main process */
#ifdef PERIODIC_C_MAIN
#ifndef TELEMETRY_MODE_MAIN
#define TELEMETRY_MODE_MAIN 0
#endif
uint8_t telemetry_mode_Main = TELEMETRY_MODE_MAIN;
#else /* PERIODIC_C_MAIN not defined (general header) */
extern uint8_t telemetry_mode_Main;
#endif /* PERIODIC_C_MAIN */
static inline void periodic_telemetry_send_Main(struct periodic_telemetry *telemetry, struct transport_tx *trans, struct link_device *dev) {  /* 512Hz */
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_default) {
    static uint8_t i128 = 0; i128++; if (i128>=128) i128=0;
    static uint16_t i256 = 0; i256++; if (i256>=256) i256=0;
    static uint16_t i512 = 0; i512++; if (i512>=512) i512=0;
    static uint16_t i563 = 0; i563++; if (i563>=563) i563=0;
    static uint16_t i614 = 0; i614++; if (i614>=614) i614=0;
    static uint16_t i665 = 0; i665++; if (i665>=665) i665=0;
    static uint16_t i819 = 0; i819++; if (i819>=819) i819=0;
    static uint16_t i1075 = 0; i1075++; if (i1075>=1075) i1075=0;
    static uint16_t i1280 = 0; i1280++; if (i1280>=1280) i1280=0;
    static uint16_t i1536 = 0; i1536++; if (i1536>=1536) i1536=0;
    static uint16_t i1587 = 0; i1587++; if (i1587>=1587) i1587=0;
    static uint16_t i1638 = 0; i1638++; if (i1638>=1638) i1638=0;
    static uint16_t i2099 = 0; i2099++; if (i2099>=2099) i2099=0;
    static uint16_t i2611 = 0; i2611++; if (i2611>=2611) i2611=0;
    static uint16_t i5683 = 0; i5683++; if (i5683>=5683) i5683=0;
    uint8_t j;
    if (i5683 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AUTOPILOT_VERSION_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AUTOPILOT_VERSION);
#endif
    }
    if (i2611 == 51) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DATALINK_REPORT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DATALINK_REPORT);
#endif
    }
    else if (i2611 == 102) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS_REF);
#endif
    }
    if (i2099 == 153) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_I2C_ERRORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_I2C_ERRORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_I2C_ERRORS);
#endif
    }
    if (i1638 == 204) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STATE_FILTER_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STATE_FILTER_STATUS);
#endif
    }
    if (i1587 == 255) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_UART_ERRORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_UART_ERRORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_UART_ERRORS);
#endif
    }
    if (i1536 == 306) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SUPERBITRF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SUPERBITRF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_SUPERBITRF);
#endif
    }
    if (i1280 == 357) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_SURVEY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_SURVEY);
#endif
    }
    else if (i1280 == 408) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ENERGY_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ENERGY);
#endif
    }
    if (i1075 == 459) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i819 == 510) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_NAV_STATUS);
#endif
    }
    if (i665 == 561) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AIR_DATA_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AIR_DATA);
#endif
    }
    else if (i665 == 612) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_WP_MOVED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_WP_MOVED);
#endif
    }
    if (i614 == 49) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i563 == 100) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i512 == 151) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_CAM_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_CAM_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_CAM);
#endif
    }
    if (i256 == 202) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_VECTORNAV_INFO_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_VECTORNAV_INFO_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_VECTORNAV_INFO);
#endif
    }
    if (i128 == 125) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_OPTIC_FLOW_EST_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_OPTIC_FLOW_EST_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_OPTIC_FLOW_EST);
#endif
    }
    else if (i128 == 48) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS);
#endif
    }
    else if (i128 == 99) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GPS_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_GPS_INT);
#endif
    }
    else if (i128 == 22) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_FP);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_ppm) {
    static uint8_t i25 = 0; i25++; if (i25>=25) i25=0;
    static uint8_t i102 = 0; i102++; if (i102>=102) i102=0;
    static uint16_t i256 = 0; i256++; if (i256>=256) i256=0;
    static uint16_t i512 = 0; i512++; if (i512>=512) i512=0;
    static uint16_t i1075 = 0; i1075++; if (i1075>=1075) i1075=0;
    uint8_t j;
    if (i1075 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i512 == 51) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i256 == 102) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_RADIO_CONTROL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_RADIO_CONTROL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_RADIO_CONTROL);
#endif
    }
    else if (i256 == 153) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_RC_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_RC_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_RC);
#endif
    }
    else if (i256 == 204) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_PPM_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_PPM_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_PPM);
#endif
    }
    else if (i256 == 255) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i102 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_BEBOP_ACTUATORS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_BEBOP_ACTUATORS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_BEBOP_ACTUATORS);
#endif
    }
    if (i25 == 1) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_CMD_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_CMD_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_CMD);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_raw_sensors) {
    static uint8_t i25 = 0; i25++; if (i25>=25) i25=0;
    static uint8_t i51 = 0; i51++; if (i51>=51) i51=0;
    static uint16_t i256 = 0; i256++; if (i256>=256) i256=0;
    static uint16_t i614 = 0; i614++; if (i614>=614) i614=0;
    static uint16_t i1075 = 0; i1075++; if (i1075>=1075) i1075=0;
    uint8_t j;
    if (i1075 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i614 == 51) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i256 == 102) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i51 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_BARO_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_BARO_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_BARO_RAW);
#endif
    }
    if (i25 == 1) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ARDRONE_NAVDATA_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ARDRONE_NAVDATA_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ARDRONE_NAVDATA);
#endif
    }
    else if (i25 == 2) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_IMU_MAG_RAW);
#endif
    }
    else if (i25 == 3) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_IMU_GYRO_RAW);
#endif
    }
    else if (i25 == 4) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_RAW_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_IMU_ACCEL_RAW);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_scaled_sensors) {
    static uint8_t i38 = 0; i38++; if (i38>=38) i38=0;
    static uint8_t i51 = 0; i51++; if (i51>=51) i51=0;
    static uint16_t i256 = 0; i256++; if (i256>=256) i256=0;
    static uint16_t i614 = 0; i614++; if (i614>=614) i614=0;
    static uint16_t i1075 = 0; i1075++; if (i1075>=1075) i1075=0;
    uint8_t j;
    if (i1075 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i614 == 51) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i256 == 102) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i51 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_SCALED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_MAG_SCALED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_IMU_MAG_SCALED);
#endif
    }
    if (i38 == 13) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_SCALED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_ACCEL_SCALED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_IMU_ACCEL_SCALED);
#endif
    }
    else if (i38 == 26) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_SCALED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_IMU_GYRO_SCALED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_IMU_GYRO_SCALED);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_ahrs) {
    static uint8_t i40 = 0; i40++; if (i40>=40) i40=0;
    static uint8_t i51 = 0; i51++; if (i51>=51) i51=0;
    static uint8_t i128 = 0; i128++; if (i128>=128) i128=0;
    static uint16_t i256 = 0; i256++; if (i256>=256) i256=0;
    static uint16_t i614 = 0; i614++; if (i614>=614) i614=0;
    static uint16_t i1075 = 0; i1075++; if (i1075>=1075) i1075=0;
    static uint16_t i1126 = 0; i1126++; if (i1126>=1126) i1126=0;
    static uint16_t i2560 = 0; i2560++; if (i2560>=2560) i2560=0;
    uint8_t j;
    if (i2560 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GEO_MAG_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GEO_MAG_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_GEO_MAG);
#endif
    }
    if (i1126 == 51) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FILTER_ALIGNER_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FILTER_ALIGNER_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_FILTER_ALIGNER);
#endif
    }
    if (i1075 == 102) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i614 == 153) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i256 == 204) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FILTER_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FILTER_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_FILTER);
#endif
    }
    else if (i256 == 255) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i128 == 50) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_QUAT_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_QUAT_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AHRS_QUAT_INT);
#endif
    }
    if (i51 == 50) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_EULER_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_EULER_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AHRS_EULER);
#endif
    }
    if (i51 == 50) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_EULER_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_EULER_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AHRS_EULER_INT);
#endif
    }
    if (i40 == 21) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_GYRO_BIAS_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_GYRO_BIAS_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AHRS_GYRO_BIAS_INT);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_rate_loop) {
    static uint8_t i10 = 0; i10++; if (i10>=10) i10=0;
    static uint16_t i256 = 0; i256++; if (i256>=256) i256=0;
    static uint16_t i614 = 0; i614++; if (i614>=614) i614=0;
    static uint16_t i1075 = 0; i1075++; if (i1075>=1075) i1075=0;
    uint8_t j;
    if (i1075 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i614 == 51) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i256 == 102) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i10 == 3) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_RATE_LOOP_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_RATE_LOOP_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_RATE_LOOP);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_attitude_setpoint_viz) {
    static uint8_t i25 = 0; i25++; if (i25>=25) i25=0;
    static uint8_t i51 = 0; i51++; if (i51>=51) i51=0;
    static uint16_t i256 = 0; i256++; if (i256>=256) i256=0;
    static uint16_t i460 = 0; i460++; if (i460>=460) i460=0;
    static uint16_t i614 = 0; i614++; if (i614>=614) i614=0;
    uint8_t j;
    if (i614 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i460 == 51) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i256 == 102) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i51 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_RADIO_CONTROL_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_RADIO_CONTROL_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_RADIO_CONTROL);
#endif
    }
    if (i25 == 1) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_REF_QUAT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_AHRS_REF_QUAT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_AHRS_REF_QUAT);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_attitude_loop) {
    static uint8_t i15 = 0; i15++; if (i15>=15) i15=0;
    static uint8_t i128 = 0; i128++; if (i128>=128) i128=0;
    static uint16_t i256 = 0; i256++; if (i256>=256) i256=0;
    static uint16_t i460 = 0; i460++; if (i460>=460) i460=0;
    static uint16_t i614 = 0; i614++; if (i614>=614) i614=0;
    uint8_t j;
    if (i614 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i460 == 51) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i256 == 102) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i128 == 25) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INDI_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INDI_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_INDI);
#endif
    }
    if (i15 == 1) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_REF_FLOAT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_REF_FLOAT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_REF_FLOAT);
#endif
    }
    else if (i15 == 7) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_FLOAT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_FLOAT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_FLOAT);
#endif
    }
    else if (i15 == 13) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_REF_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_REF_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_REF_INT);
#endif
    }
    else if (i15 == 4) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_INT);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_vert_loop) {
    static uint8_t i25 = 0; i25++; if (i25>=25) i25=0;
    static uint8_t i56 = 0; i56++; if (i56>=56) i56=0;
    static uint16_t i256 = 0; i256++; if (i256>=256) i256=0;
    static uint16_t i460 = 0; i460++; if (i460>=460) i460=0;
    static uint16_t i614 = 0; i614++; if (i614>=614) i614=0;
    static uint16_t i2611 = 0; i2611++; if (i2611>=2611) i2611=0;
    uint8_t j;
    if (i2611 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS_REF);
#endif
    }
    if (i614 == 51) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i460 == 102) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i256 == 153) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i56 == 36) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS);
#endif
    }
    if (i25 == 12) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_Z_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_Z_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS_Z);
#endif
    }
    else if (i25 == 13) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_VERT_LOOP_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_VERT_LOOP_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_VERT_LOOP);
#endif
    }
    else if (i25 == 14) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_VFF_EXTENDED_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_VFF_EXTENDED_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_VFF_EXTENDED);
#endif
    }
    else if (i25 == 15) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_VFF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_VFF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_VFF);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_h_loop) {
    static uint8_t i15 = 0; i15++; if (i15>=15) i15=0;
    static uint8_t i25 = 0; i25++; if (i25>=25) i25=0;
    static uint8_t i31 = 0; i31++; if (i31>=31) i31=0;
    static uint8_t i102 = 0; i102++; if (i102>=102) i102=0;
    static uint8_t i204 = 0; i204++; if (i204>=204) i204=0;
    static uint16_t i409 = 0; i409++; if (i409>=409) i409=0;
    static uint16_t i460 = 0; i460++; if (i460>=460) i460=0;
    static uint16_t i614 = 0; i614++; if (i614>=614) i614=0;
    static uint16_t i819 = 0; i819++; if (i819>=819) i819=0;
    static uint16_t i2611 = 0; i2611++; if (i2611>=2611) i2611=0;
    uint8_t j;
    if (i2611 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS_REF);
#endif
    }
    if (i819 == 51) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_NAV_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_NAV_STATUS);
#endif
    }
    if (i614 == 102) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i460 == 153) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i409 == 204) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_FP_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_FP);
#endif
    }
    if (i204 == 51) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_FLOAT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_FLOAT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_FLOAT);
#endif
    }
    else if (i204 == 102) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_STAB_ATTITUDE_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_STAB_ATTITUDE_INT);
#endif
    }
    if (i102 == 51) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_HFF_DBG_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_HFF_DBG_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_HFF_DBG);
#endif
    }
    if (i31 == 9) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GUIDANCE_H_REF_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GUIDANCE_H_REF_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_GUIDANCE_H_REF_INT);
#endif
    }
    else if (i31 == 29) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_HOVER_LOOP_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_HOVER_LOOP_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_HOVER_LOOP);
#endif
    }
    if (i25 == 5) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_HFF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_HFF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_HFF);
#endif
    }
    if (i15 == 11) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_HFF_GPS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_HFF_GPS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_HFF_GPS);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_aligner) {
    static uint8_t i10 = 0; i10++; if (i10>=10) i10=0;
    static uint16_t i460 = 0; i460++; if (i460>=460) i460=0;
    uint8_t j;
    if (i460 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i10 == 1) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_FILTER_ALIGNER_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_FILTER_ALIGNER_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_FILTER_ALIGNER);
#endif
    }
  }
  if (telemetry_mode_Main == TELEMETRY_MODE_Main_tune_hover) {
    static uint8_t i25 = 0; i25++; if (i25>=25) i25=0;
    static uint8_t i51 = 0; i51++; if (i51>=51) i51=0;
    static uint16_t i563 = 0; i563++; if (i563>=563) i563=0;
    static uint16_t i614 = 0; i614++; if (i614>=614) i614=0;
    static uint16_t i1075 = 0; i1075++; if (i1075>=1075) i1075=0;
    static uint16_t i2611 = 0; i2611++; if (i2611>=2611) i2611=0;
    uint8_t j;
    if (i2611 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_INS_REF_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_INS_REF);
#endif
    }
    if (i1075 == 51) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ALIVE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ALIVE);
#endif
    }
    if (i614 == 102) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_STATUS_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_STATUS);
#endif
    }
    if (i563 == 153) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_DL_VALUE_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_DL_VALUE);
#endif
    }
    if (i51 == 0) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_TUNE_HOVER_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_ROTORCRAFT_TUNE_HOVER_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_ROTORCRAFT_TUNE_HOVER);
#endif
    }
    if (i25 == 1) {
      for (j = 0; j < TELEMETRY_NB_CBS; j++) {
        if (telemetry->cbs[TELEMETRY_PPRZ_MSG_GUIDANCE_H_INT_IDX].slots[j] != NULL)
          telemetry->cbs[TELEMETRY_PPRZ_MSG_GUIDANCE_H_INT_IDX].slots[j](trans, dev);
        else break;
      }
#if USE_PERIODIC_TELEMETRY_REPORT
      if (j == 0) periodic_telemetry_err_report(TELEMETRY_PROCESS_Main, telemetry_mode_Main, PPRZ_MSG_ID_GUIDANCE_H_INT);
#endif
    }
  }
}
#endif // _VAR_PERIODIC_H_
