/* This file has been generated by gen_settings from /home/rc/papa/var/aircrafts/ardrone2/settings_modules.xml /home/rc/papa/conf/modules/geo_mag.xml /home/rc/papa/conf/modules/air_data.xml /home/rc/papa/conf/settings/nps.xml /home/rc/papa/conf/settings/estimation/body_to_imu.xml /home/rc/papa/conf/settings/estimation/ahrs_int_cmpl_quat.xml /home/rc/papa/conf/settings/control/stabilization_att_int_quat.xml /home/rc/papa/conf/settings/control/stabilization_rate.xml /home/rc/papa/conf/settings/control/rotorcraft_guidance.xml /home/rc/papa/conf/settings/rotorcraft_basic.xml /home/rc/papa/var/aircrafts/ardrone2/settings_telemetry.xml */
/* Version v5.8.2_stable-1-g22dabc7-dirty */
/* Please DO NOT EDIT */

#ifndef SETTINGS_H
#define SETTINGS_H

#define RCSettings(mode_changed) { \
}

#include "air_data/air_data.h"
#include "autopilot.h"
#include "generated/periodic_telemetry.h"
#include "geo_mag/geo_mag.h"
#include "guidance/guidance_h.h"
#include "guidance/guidance_v.h"
#include "navigation.h"
#include "nps/nps_atmosphere.h"
#include "nps/nps_autopilot.h"
#include "nps/nps_electrical.h"
#include "stabilization/stabilization_attitude_common_int.h"
#include "stabilization/stabilization_attitude_quat_int.h"
#include "stabilization/stabilization_rate.h"
#include "subsystems/ahrs/ahrs_int_cmpl_quat.h"
#include "subsystems/datalink/datalink.h"
#include "subsystems/gps/gps_sim_nps.h"
#include "subsystems/imu.h"
#include "generated/modules.h"

#define SETTINGS_NAMES { \
 { "telemetry_mode_Main" }, \
 { "autopilot_mode_auto2" }, \
 { "kill_throttle" }, \
 { "autopilot_power_switch" }, \
 { "autopilot_mode" }, \
 { "guidance_v_kp" }, \
 { "guidance_v_kd" }, \
 { "guidance_v_ki" }, \
 { "guidance_v_nominal_throttle" }, \
 { "guidance_v_adapt_throttle_enabled" }, \
 { "guidance_v_z_sp" }, \
 { "guidance_h.use_ref" }, \
 { "gh_ref.max_speed" }, \
 { "guidance_h.approx_force_by_thrust" }, \
 { "gh_ref.tau" }, \
 { "gh_ref.omega" }, \
 { "gh_ref.zeta" }, \
 { "guidance_h.gains.p" }, \
 { "guidance_h.gains.d" }, \
 { "guidance_h.gains.i" }, \
 { "guidance_h.gains.v" }, \
 { "guidance_h.gains.a" }, \
 { "guidance_h.sp.pos.x" }, \
 { "guidance_h.sp.pos.y" }, \
 { "flight_altitude" }, \
 { "nav_heading" }, \
 { "nav_radius" }, \
 { "nav_climb_vspeed" }, \
 { "nav_descend_vspeed" }, \
 { "stabilization_rate_gain.p" }, \
 { "stabilization_rate_gain.q" }, \
 { "stabilization_rate_gain.r" }, \
 { "stabilization_rate_igain.p" }, \
 { "stabilization_rate_igain.q" }, \
 { "stabilization_rate_igain.r" }, \
 { "stabilization_gains.p.x" }, \
 { "stabilization_gains.d.x" }, \
 { "stabilization_gains.i.x" }, \
 { "stabilization_gains.dd.x" }, \
 { "stabilization_gains.p.y" }, \
 { "stabilization_gains.d.y" }, \
 { "stabilization_gains.i.y" }, \
 { "stabilization_gains.dd.y" }, \
 { "stabilization_gains.p.z" }, \
 { "stabilization_gains.d.z" }, \
 { "stabilization_gains.i.z" }, \
 { "stabilization_gains.dd.z" }, \
 { "att_ref_quat_i.model.omega.p" }, \
 { "att_ref_quat_i.model.zeta.p" }, \
 { "att_ref_quat_i.model.omega.q" }, \
 { "att_ref_quat_i.model.zeta.q" }, \
 { "att_ref_quat_i.model.omega.r" }, \
 { "att_ref_quat_i.model.zeta.r" }, \
 { "ahrs_icq.gravity_heuristic_factor" }, \
 { "ahrs_icq.accel_omega" }, \
 { "ahrs_icq.accel_zeta" }, \
 { "ahrs_icq.mag_omega" }, \
 { "ahrs_icq.mag_zeta" }, \
 { "imu.body_to_imu.eulers_f.phi" }, \
 { "imu.body_to_imu.eulers_f.theta" }, \
 { "imu.body_to_imu.eulers_f.psi" }, \
 { "imu.b2i_set_current" }, \
 { "nps_bypass_ahrs" }, \
 { "nps_bypass_ins" }, \
 { "gps_has_fix" }, \
 { "datalink_enabled" }, \
 { "nps_electrical.supply_voltage" }, \
 { "nps_atmosphere.wind_speed" }, \
 { "nps_atmosphere.wind_dir" }, \
 { "nps_atmosphere.turbulence_severity" }, \
 { "air_data.qnh" }, \
 { "air_data.tas_factor" }, \
 { "air_data.calc_qnh_once" }, \
 { "air_data.calc_airspeed" }, \
 { "air_data.calc_tas_factor" }, \
 { "air_data.calc_amsl_baro" }, \
 { "geo_mag.calc_once" }, \
 { "calibration_send_imu_mag_current_status" }, \
};
#define SETTINGS_NAMES_SHORT { \
 "tel_mod_Mai" , \
 "aut_mod_aut" , \
 "kil_thr" , \
 "aut_pow_swi" , \
 "aut_mod" , \
 "gui_v_kp" , \
 "gui_v_kd" , \
 "gui_v_ki" , \
 "gui_v_nom_thr" , \
 "gui_v_ada_thr_en" , \
 "gui_v_z_sp" , \
 "gui_h_use_ref" , \
 "gh_ref_max_spe" , \
 "gui_h_app_for_by" , \
 "gh_ref_tau" , \
 "gh_ref_ome" , \
 "gh_ref_zet" , \
 "gui_h_gai_p" , \
 "gui_h_gai_d" , \
 "gui_h_gai_i" , \
 "gui_h_gai_v" , \
 "gui_h_gai_a" , \
 "gui_h_sp_pos_x" , \
 "gui_h_sp_pos_y" , \
 "fli_alt" , \
 "nav_hea" , \
 "nav_rad" , \
 "nav_cli_vsp" , \
 "nav_des_vsp" , \
 "sta_rat_gai_p" , \
 "sta_rat_gai_q" , \
 "sta_rat_gai_r" , \
 "sta_rat_iga_p" , \
 "sta_rat_iga_q" , \
 "sta_rat_iga_r" , \
 "sta_gai_p_x" , \
 "sta_gai_d_x" , \
 "sta_gai_i_x" , \
 "sta_gai_dd_x" , \
 "sta_gai_p_y" , \
 "sta_gai_d_y" , \
 "sta_gai_i_y" , \
 "sta_gai_dd_y" , \
 "sta_gai_p_z" , \
 "sta_gai_d_z" , \
 "sta_gai_i_z" , \
 "sta_gai_dd_z" , \
 "att_ref_qua_i_mo" , \
 "att_ref_qua_i_mo" , \
 "att_ref_qua_i_mo" , \
 "att_ref_qua_i_mo" , \
 "att_ref_qua_i_mo" , \
 "att_ref_qua_i_mo" , \
 "ahr_icq_gra_heu_" , \
 "ahr_icq_acc_ome" , \
 "ahr_icq_acc_zet" , \
 "ahr_icq_mag_ome" , \
 "ahr_icq_mag_zet" , \
 "imu_bod_to_imu_e" , \
 "imu_bod_to_imu_e" , \
 "imu_bod_to_imu_e" , \
 "imu_b2i_set_cur" , \
 "nps_byp_ahr" , \
 "nps_byp_ins" , \
 "gps_has_fix" , \
 "dat_ena" , \
 "nps_ele_sup_vol" , \
 "nps_atm_win_spe" , \
 "nps_atm_win_dir" , \
 "nps_atm_tur_sev" , \
 "air_dat_qnh" , \
 "air_dat_tas_fac" , \
 "air_dat_cal_qnh_" , \
 "air_dat_cal_air" , \
 "air_dat_cal_tas_" , \
 "air_dat_cal_ams_" , \
 "geo_mag_cal_onc" , \
 "cal_sen_imu_mag_" , \
};
#define NB_SETTING 78
#define DlSetting(_idx, _value) { \
  switch (_idx) { \
    case 0: telemetry_mode_Main = _value; break;\
    case 1: autopilot_mode_auto2 = _value; break;\
    case 2: autopilot_KillThrottle( _value ); _value = kill_throttle; break;\
    case 3: autopilot_SetPowerSwitch( _value ); _value = autopilot_power_switch; break;\
    case 4: autopilot_set_mode( _value ); _value = autopilot_mode; break;\
    case 5: guidance_v_kp = _value; break;\
    case 6: guidance_v_kd = _value; break;\
    case 7: guidance_v_SetKi( _value ); _value = guidance_v_ki; break;\
    case 8: guidance_v_nominal_throttle = _value; break;\
    case 9: guidance_v_adapt_throttle_enabled = _value; break;\
    case 10: guidance_v_z_sp = _value; break;\
    case 11: guidance_h_SetUseRef( _value ); _value = guidance_h.use_ref; break;\
    case 12: guidance_h_SetMaxSpeed( _value ); _value = gh_ref.max_speed; break;\
    case 13: guidance_h.approx_force_by_thrust = _value; break;\
    case 14: guidance_h_SetTau( _value ); _value = gh_ref.tau; break;\
    case 15: guidance_h_SetOmega( _value ); _value = gh_ref.omega; break;\
    case 16: guidance_h_SetZeta( _value ); _value = gh_ref.zeta; break;\
    case 17: guidance_h.gains.p = _value; break;\
    case 18: guidance_h.gains.d = _value; break;\
    case 19: guidance_h_set_igain( _value ); _value = guidance_h.gains.i; break;\
    case 20: guidance_h.gains.v = _value; break;\
    case 21: guidance_h.gains.a = _value; break;\
    case 22: guidance_h.sp.pos.x = _value; break;\
    case 23: guidance_h.sp.pos.y = _value; break;\
    case 24: navigation_SetFlightAltitude( _value ); _value = flight_altitude; break;\
    case 25: nav_heading = _value; break;\
    case 26: nav_radius = _value; break;\
    case 27: nav_climb_vspeed = _value; break;\
    case 28: nav_descend_vspeed = _value; break;\
    case 29: stabilization_rate_gain.p = _value; break;\
    case 30: stabilization_rate_gain.q = _value; break;\
    case 31: stabilization_rate_gain.r = _value; break;\
    case 32: stabilization_rate_igain.p = _value; break;\
    case 33: stabilization_rate_igain.q = _value; break;\
    case 34: stabilization_rate_igain.r = _value; break;\
    case 35: stabilization_gains.p.x = _value; break;\
    case 36: stabilization_gains.d.x = _value; break;\
    case 37: stabilization_gains.i.x = _value; break;\
    case 38: stabilization_gains.dd.x = _value; break;\
    case 39: stabilization_gains.p.y = _value; break;\
    case 40: stabilization_gains.d.y = _value; break;\
    case 41: stabilization_gains.i.y = _value; break;\
    case 42: stabilization_gains.dd.y = _value; break;\
    case 43: stabilization_gains.p.z = _value; break;\
    case 44: stabilization_gains.d.z = _value; break;\
    case 45: stabilization_gains.i.z = _value; break;\
    case 46: stabilization_gains.dd.z = _value; break;\
    case 47: stabilization_attitude_quat_int_SetOmegaP( _value ); _value = att_ref_quat_i.model.omega.p; break;\
    case 48: stabilization_attitude_quat_int_SetZetaP( _value ); _value = att_ref_quat_i.model.zeta.p; break;\
    case 49: stabilization_attitude_quat_int_SetOmegaQ( _value ); _value = att_ref_quat_i.model.omega.q; break;\
    case 50: stabilization_attitude_quat_int_SetZetaQ( _value ); _value = att_ref_quat_i.model.zeta.q; break;\
    case 51: stabilization_attitude_quat_int_SetOmegaR( _value ); _value = att_ref_quat_i.model.omega.r; break;\
    case 52: stabilization_attitude_quat_int_SetZetaR( _value ); _value = att_ref_quat_i.model.zeta.r; break;\
    case 53: ahrs_icq.gravity_heuristic_factor = _value; break;\
    case 54: ahrs_int_cmpl_quat_SetAccelOmega( _value ); _value = ahrs_icq.accel_omega; break;\
    case 55: ahrs_int_cmpl_quat_SetAccelZeta( _value ); _value = ahrs_icq.accel_zeta; break;\
    case 56: ahrs_int_cmpl_quat_SetMagOmega( _value ); _value = ahrs_icq.mag_omega; break;\
    case 57: ahrs_int_cmpl_quat_SetMagZeta( _value ); _value = ahrs_icq.mag_zeta; break;\
    case 58: imu_SetBodyToImuPhi( _value ); _value = imu.body_to_imu.eulers_f.phi; break;\
    case 59: imu_SetBodyToImuTheta( _value ); _value = imu.body_to_imu.eulers_f.theta; break;\
    case 60: imu_SetBodyToImuPsi( _value ); _value = imu.body_to_imu.eulers_f.psi; break;\
    case 61: imu_SetBodyToImuCurrent( _value ); _value = imu.b2i_set_current; break;\
    case 62: nps_bypass_ahrs = _value; break;\
    case 63: nps_bypass_ins = _value; break;\
    case 64: gps_has_fix = _value; break;\
    case 65: datalink_enabled = _value; break;\
    case 66: nps_electrical.supply_voltage = _value; break;\
    case 67: nps_atmosphere_set_wind_speed( _value ); _value = nps_atmosphere.wind_speed; break;\
    case 68: nps_atmosphere_set_wind_dir( _value ); _value = nps_atmosphere.wind_dir; break;\
    case 69: nps_atmosphere.turbulence_severity = _value; break;\
    case 70: air_data.qnh = _value; break;\
    case 71: air_data.tas_factor = _value; break;\
    case 72: air_data.calc_qnh_once = _value; break;\
    case 73: air_data.calc_airspeed = _value; break;\
    case 74: air_data.calc_tas_factor = _value; break;\
    case 75: air_data.calc_amsl_baro = _value; break;\
    case 76: geo_mag.calc_once = _value; break;\
    case 77: calibration_send_imu_mag_current_status = _value; break;\
    default: break;\
  }\
}
#define PeriodicSendDlValue(_trans, _dev) { \
  static uint8_t i;\
  float var;\
  if (i >= 78) i = 0;\
  switch (i) { \
    case 0: var = telemetry_mode_Main; break;\
    case 1: var = autopilot_mode_auto2; break;\
    case 2: var = kill_throttle; break;\
    case 3: var = autopilot_power_switch; break;\
    case 4: var = autopilot_mode; break;\
    case 5: var = guidance_v_kp; break;\
    case 6: var = guidance_v_kd; break;\
    case 7: var = guidance_v_ki; break;\
    case 8: var = guidance_v_nominal_throttle; break;\
    case 9: var = guidance_v_adapt_throttle_enabled; break;\
    case 10: var = guidance_v_z_sp; break;\
    case 11: var = guidance_h.use_ref; break;\
    case 12: var = gh_ref.max_speed; break;\
    case 13: var = guidance_h.approx_force_by_thrust; break;\
    case 14: var = gh_ref.tau; break;\
    case 15: var = gh_ref.omega; break;\
    case 16: var = gh_ref.zeta; break;\
    case 17: var = guidance_h.gains.p; break;\
    case 18: var = guidance_h.gains.d; break;\
    case 19: var = guidance_h.gains.i; break;\
    case 20: var = guidance_h.gains.v; break;\
    case 21: var = guidance_h.gains.a; break;\
    case 22: var = guidance_h.sp.pos.x; break;\
    case 23: var = guidance_h.sp.pos.y; break;\
    case 24: var = flight_altitude; break;\
    case 25: var = nav_heading; break;\
    case 26: var = nav_radius; break;\
    case 27: var = nav_climb_vspeed; break;\
    case 28: var = nav_descend_vspeed; break;\
    case 29: var = stabilization_rate_gain.p; break;\
    case 30: var = stabilization_rate_gain.q; break;\
    case 31: var = stabilization_rate_gain.r; break;\
    case 32: var = stabilization_rate_igain.p; break;\
    case 33: var = stabilization_rate_igain.q; break;\
    case 34: var = stabilization_rate_igain.r; break;\
    case 35: var = stabilization_gains.p.x; break;\
    case 36: var = stabilization_gains.d.x; break;\
    case 37: var = stabilization_gains.i.x; break;\
    case 38: var = stabilization_gains.dd.x; break;\
    case 39: var = stabilization_gains.p.y; break;\
    case 40: var = stabilization_gains.d.y; break;\
    case 41: var = stabilization_gains.i.y; break;\
    case 42: var = stabilization_gains.dd.y; break;\
    case 43: var = stabilization_gains.p.z; break;\
    case 44: var = stabilization_gains.d.z; break;\
    case 45: var = stabilization_gains.i.z; break;\
    case 46: var = stabilization_gains.dd.z; break;\
    case 47: var = att_ref_quat_i.model.omega.p; break;\
    case 48: var = att_ref_quat_i.model.zeta.p; break;\
    case 49: var = att_ref_quat_i.model.omega.q; break;\
    case 50: var = att_ref_quat_i.model.zeta.q; break;\
    case 51: var = att_ref_quat_i.model.omega.r; break;\
    case 52: var = att_ref_quat_i.model.zeta.r; break;\
    case 53: var = ahrs_icq.gravity_heuristic_factor; break;\
    case 54: var = ahrs_icq.accel_omega; break;\
    case 55: var = ahrs_icq.accel_zeta; break;\
    case 56: var = ahrs_icq.mag_omega; break;\
    case 57: var = ahrs_icq.mag_zeta; break;\
    case 58: var = imu.body_to_imu.eulers_f.phi; break;\
    case 59: var = imu.body_to_imu.eulers_f.theta; break;\
    case 60: var = imu.body_to_imu.eulers_f.psi; break;\
    case 61: var = imu.b2i_set_current; break;\
    case 62: var = nps_bypass_ahrs; break;\
    case 63: var = nps_bypass_ins; break;\
    case 64: var = gps_has_fix; break;\
    case 65: var = datalink_enabled; break;\
    case 66: var = nps_electrical.supply_voltage; break;\
    case 67: var = nps_atmosphere.wind_speed; break;\
    case 68: var = nps_atmosphere.wind_dir; break;\
    case 69: var = nps_atmosphere.turbulence_severity; break;\
    case 70: var = air_data.qnh; break;\
    case 71: var = air_data.tas_factor; break;\
    case 72: var = air_data.calc_qnh_once; break;\
    case 73: var = air_data.calc_airspeed; break;\
    case 74: var = air_data.calc_tas_factor; break;\
    case 75: var = air_data.calc_amsl_baro; break;\
    case 76: var = geo_mag.calc_once; break;\
    case 77: var = calibration_send_imu_mag_current_status; break;\
    default: var = 0.; break;\
  }\
  pprz_msg_send_DL_VALUE(_trans, _dev, AC_ID, &i, &var);\
  i++;\
}
static inline float settings_get_value(uint8_t i) {
  switch (i) {
    case 0: return telemetry_mode_Main;
    case 1: return autopilot_mode_auto2;
    case 2: return kill_throttle;
    case 3: return autopilot_power_switch;
    case 4: return autopilot_mode;
    case 5: return guidance_v_kp;
    case 6: return guidance_v_kd;
    case 7: return guidance_v_ki;
    case 8: return guidance_v_nominal_throttle;
    case 9: return guidance_v_adapt_throttle_enabled;
    case 10: return guidance_v_z_sp;
    case 11: return guidance_h.use_ref;
    case 12: return gh_ref.max_speed;
    case 13: return guidance_h.approx_force_by_thrust;
    case 14: return gh_ref.tau;
    case 15: return gh_ref.omega;
    case 16: return gh_ref.zeta;
    case 17: return guidance_h.gains.p;
    case 18: return guidance_h.gains.d;
    case 19: return guidance_h.gains.i;
    case 20: return guidance_h.gains.v;
    case 21: return guidance_h.gains.a;
    case 22: return guidance_h.sp.pos.x;
    case 23: return guidance_h.sp.pos.y;
    case 24: return flight_altitude;
    case 25: return nav_heading;
    case 26: return nav_radius;
    case 27: return nav_climb_vspeed;
    case 28: return nav_descend_vspeed;
    case 29: return stabilization_rate_gain.p;
    case 30: return stabilization_rate_gain.q;
    case 31: return stabilization_rate_gain.r;
    case 32: return stabilization_rate_igain.p;
    case 33: return stabilization_rate_igain.q;
    case 34: return stabilization_rate_igain.r;
    case 35: return stabilization_gains.p.x;
    case 36: return stabilization_gains.d.x;
    case 37: return stabilization_gains.i.x;
    case 38: return stabilization_gains.dd.x;
    case 39: return stabilization_gains.p.y;
    case 40: return stabilization_gains.d.y;
    case 41: return stabilization_gains.i.y;
    case 42: return stabilization_gains.dd.y;
    case 43: return stabilization_gains.p.z;
    case 44: return stabilization_gains.d.z;
    case 45: return stabilization_gains.i.z;
    case 46: return stabilization_gains.dd.z;
    case 47: return att_ref_quat_i.model.omega.p;
    case 48: return att_ref_quat_i.model.zeta.p;
    case 49: return att_ref_quat_i.model.omega.q;
    case 50: return att_ref_quat_i.model.zeta.q;
    case 51: return att_ref_quat_i.model.omega.r;
    case 52: return att_ref_quat_i.model.zeta.r;
    case 53: return ahrs_icq.gravity_heuristic_factor;
    case 54: return ahrs_icq.accel_omega;
    case 55: return ahrs_icq.accel_zeta;
    case 56: return ahrs_icq.mag_omega;
    case 57: return ahrs_icq.mag_zeta;
    case 58: return imu.body_to_imu.eulers_f.phi;
    case 59: return imu.body_to_imu.eulers_f.theta;
    case 60: return imu.body_to_imu.eulers_f.psi;
    case 61: return imu.b2i_set_current;
    case 62: return nps_bypass_ahrs;
    case 63: return nps_bypass_ins;
    case 64: return gps_has_fix;
    case 65: return datalink_enabled;
    case 66: return nps_electrical.supply_voltage;
    case 67: return nps_atmosphere.wind_speed;
    case 68: return nps_atmosphere.wind_dir;
    case 69: return nps_atmosphere.turbulence_severity;
    case 70: return air_data.qnh;
    case 71: return air_data.tas_factor;
    case 72: return air_data.calc_qnh_once;
    case 73: return air_data.calc_airspeed;
    case 74: return air_data.calc_tas_factor;
    case 75: return air_data.calc_amsl_baro;
    case 76: return geo_mag.calc_once;
    case 77: return calibration_send_imu_mag_current_status;
    default: return 0.;
  }
}

/* Persistent Settings */
struct PersistentSettings {
  float s_0; /* guidance_v_kp */
  float s_1; /* guidance_v_kd */
  float s_2; /* guidance_v_ki */
  float s_3; /* guidance_v_nominal_throttle */
  float s_4; /* guidance_v_adapt_throttle_enabled */
  float s_5; /* guidance_h.use_ref */
  float s_6; /* gh_ref.max_speed */
  uint8_t s_7; /* guidance_h.approx_force_by_thrust */
  float s_8; /* gh_ref.tau */
  float s_9; /* gh_ref.omega */
  float s_10; /* gh_ref.zeta */
  int32_t s_11; /* guidance_h.gains.p */
  int32_t s_12; /* guidance_h.gains.d */
  int32_t s_13; /* guidance_h.gains.i */
  int32_t s_14; /* guidance_h.gains.v */
  int32_t s_15; /* guidance_h.gains.a */
  int32_t s_16; /* stabilization_rate_gain.p */
  int32_t s_17; /* stabilization_rate_gain.q */
  int32_t s_18; /* stabilization_rate_gain.r */
  int32_t s_19; /* stabilization_rate_igain.p */
  int32_t s_20; /* stabilization_rate_igain.q */
  int32_t s_21; /* stabilization_rate_igain.r */
  int32_t s_22; /* stabilization_gains.p.x */
  int32_t s_23; /* stabilization_gains.d.x */
  int32_t s_24; /* stabilization_gains.i.x */
  int32_t s_25; /* stabilization_gains.dd.x */
  int32_t s_26; /* stabilization_gains.p.y */
  int32_t s_27; /* stabilization_gains.d.y */
  int32_t s_28; /* stabilization_gains.i.y */
  int32_t s_29; /* stabilization_gains.dd.y */
  int32_t s_30; /* stabilization_gains.p.z */
  int32_t s_31; /* stabilization_gains.d.z */
  int32_t s_32; /* stabilization_gains.i.z */
  int32_t s_33; /* stabilization_gains.dd.z */
  uint8_t s_34; /* ahrs_icq.gravity_heuristic_factor */
  float s_35; /* ahrs_icq.accel_omega */
  float s_36; /* ahrs_icq.accel_zeta */
  float s_37; /* ahrs_icq.mag_omega */
  float s_38; /* ahrs_icq.mag_zeta */
  float s_39; /* imu.body_to_imu.eulers_f.phi */
  float s_40; /* imu.body_to_imu.eulers_f.theta */
  float s_41; /* imu.body_to_imu.eulers_f.psi */
  float s_42; /* air_data.tas_factor */
  uint8_t s_43; /* air_data.calc_airspeed */
  uint8_t s_44; /* air_data.calc_tas_factor */
  uint8_t s_45; /* air_data.calc_amsl_baro */
};

extern struct PersistentSettings pers_settings;

static inline void persistent_settings_store( void ) {
  pers_settings.s_0 = guidance_v_kp;
  pers_settings.s_1 = guidance_v_kd;
  pers_settings.s_2 = guidance_v_ki;
  pers_settings.s_3 = guidance_v_nominal_throttle;
  pers_settings.s_4 = guidance_v_adapt_throttle_enabled;
  pers_settings.s_5 = guidance_h.use_ref;
  pers_settings.s_6 = gh_ref.max_speed;
  pers_settings.s_7 = guidance_h.approx_force_by_thrust;
  pers_settings.s_8 = gh_ref.tau;
  pers_settings.s_9 = gh_ref.omega;
  pers_settings.s_10 = gh_ref.zeta;
  pers_settings.s_11 = guidance_h.gains.p;
  pers_settings.s_12 = guidance_h.gains.d;
  pers_settings.s_13 = guidance_h.gains.i;
  pers_settings.s_14 = guidance_h.gains.v;
  pers_settings.s_15 = guidance_h.gains.a;
  pers_settings.s_16 = stabilization_rate_gain.p;
  pers_settings.s_17 = stabilization_rate_gain.q;
  pers_settings.s_18 = stabilization_rate_gain.r;
  pers_settings.s_19 = stabilization_rate_igain.p;
  pers_settings.s_20 = stabilization_rate_igain.q;
  pers_settings.s_21 = stabilization_rate_igain.r;
  pers_settings.s_22 = stabilization_gains.p.x;
  pers_settings.s_23 = stabilization_gains.d.x;
  pers_settings.s_24 = stabilization_gains.i.x;
  pers_settings.s_25 = stabilization_gains.dd.x;
  pers_settings.s_26 = stabilization_gains.p.y;
  pers_settings.s_27 = stabilization_gains.d.y;
  pers_settings.s_28 = stabilization_gains.i.y;
  pers_settings.s_29 = stabilization_gains.dd.y;
  pers_settings.s_30 = stabilization_gains.p.z;
  pers_settings.s_31 = stabilization_gains.d.z;
  pers_settings.s_32 = stabilization_gains.i.z;
  pers_settings.s_33 = stabilization_gains.dd.z;
  pers_settings.s_34 = ahrs_icq.gravity_heuristic_factor;
  pers_settings.s_35 = ahrs_icq.accel_omega;
  pers_settings.s_36 = ahrs_icq.accel_zeta;
  pers_settings.s_37 = ahrs_icq.mag_omega;
  pers_settings.s_38 = ahrs_icq.mag_zeta;
  pers_settings.s_39 = imu.body_to_imu.eulers_f.phi;
  pers_settings.s_40 = imu.body_to_imu.eulers_f.theta;
  pers_settings.s_41 = imu.body_to_imu.eulers_f.psi;
  pers_settings.s_42 = air_data.tas_factor;
  pers_settings.s_43 = air_data.calc_airspeed;
  pers_settings.s_44 = air_data.calc_tas_factor;
  pers_settings.s_45 = air_data.calc_amsl_baro;
}

static inline void persistent_settings_load( void ) {
  guidance_v_kp = pers_settings.s_0;
  guidance_v_kd = pers_settings.s_1;
  guidance_v_SetKi( pers_settings.s_2 );
  guidance_v_nominal_throttle = pers_settings.s_3;
  guidance_v_adapt_throttle_enabled = pers_settings.s_4;
  guidance_h_SetUseRef( pers_settings.s_5 );
  guidance_h_SetMaxSpeed( pers_settings.s_6 );
  guidance_h.approx_force_by_thrust = pers_settings.s_7;
  guidance_h_SetTau( pers_settings.s_8 );
  guidance_h_SetOmega( pers_settings.s_9 );
  guidance_h_SetZeta( pers_settings.s_10 );
  guidance_h.gains.p = pers_settings.s_11;
  guidance_h.gains.d = pers_settings.s_12;
  guidance_h_set_igain( pers_settings.s_13 );
  guidance_h.gains.v = pers_settings.s_14;
  guidance_h.gains.a = pers_settings.s_15;
  stabilization_rate_gain.p = pers_settings.s_16;
  stabilization_rate_gain.q = pers_settings.s_17;
  stabilization_rate_gain.r = pers_settings.s_18;
  stabilization_rate_igain.p = pers_settings.s_19;
  stabilization_rate_igain.q = pers_settings.s_20;
  stabilization_rate_igain.r = pers_settings.s_21;
  stabilization_gains.p.x = pers_settings.s_22;
  stabilization_gains.d.x = pers_settings.s_23;
  stabilization_gains.i.x = pers_settings.s_24;
  stabilization_gains.dd.x = pers_settings.s_25;
  stabilization_gains.p.y = pers_settings.s_26;
  stabilization_gains.d.y = pers_settings.s_27;
  stabilization_gains.i.y = pers_settings.s_28;
  stabilization_gains.dd.y = pers_settings.s_29;
  stabilization_gains.p.z = pers_settings.s_30;
  stabilization_gains.d.z = pers_settings.s_31;
  stabilization_gains.i.z = pers_settings.s_32;
  stabilization_gains.dd.z = pers_settings.s_33;
  ahrs_icq.gravity_heuristic_factor = pers_settings.s_34;
  ahrs_int_cmpl_quat_SetAccelOmega( pers_settings.s_35 );
  ahrs_int_cmpl_quat_SetAccelZeta( pers_settings.s_36 );
  ahrs_int_cmpl_quat_SetMagOmega( pers_settings.s_37 );
  ahrs_int_cmpl_quat_SetMagZeta( pers_settings.s_38 );
  imu_SetBodyToImuPhi( pers_settings.s_39 );
  imu_SetBodyToImuTheta( pers_settings.s_40 );
  imu_SetBodyToImuPsi( pers_settings.s_41 );
  air_data.tas_factor = pers_settings.s_42;
  air_data.calc_airspeed = pers_settings.s_43;
  air_data.calc_tas_factor = pers_settings.s_44;
  air_data.calc_amsl_baro = pers_settings.s_45;
}

#endif // SETTINGS_H
