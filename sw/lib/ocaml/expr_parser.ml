type token =
  | INT of (int)
  | FLOAT of (float)
  | IDENT of (string)
  | EOF
  | DOT
  | COMMA
  | SEMICOLON
  | LP
  | RP
  | LC
  | RC
  | LB
  | RB
  | DEREF
  | AND
  | COLON
  | OR
  | EQ
  | GT
  | ASSIGN
  | GEQ
  | NOT
  | PLUS
  | MINUS
  | MULT
  | DIV
  | MOD
  | EXPO

open Parsing;;
let _ = parse_error;;
# 24 "expr_parser.mly"
open Expr_syntax
# 36 "expr_parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  260 (* DOT *);
  261 (* COMMA *);
  262 (* SEMICOLON *);
  263 (* LP *);
  264 (* RP *);
  265 (* LC *);
  266 (* RC *);
  267 (* LB *);
  268 (* RB *);
  269 (* DEREF *);
  270 (* AND *);
  271 (* COLON *);
  272 (* OR *);
  273 (* EQ *);
  274 (* GT *);
  275 (* ASSIGN *);
  276 (* GEQ *);
  277 (* NOT *);
  278 (* PLUS *);
  279 (* MINUS *);
  280 (* MULT *);
  281 (* DIV *);
  282 (* MOD *);
  283 (* EXPO *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\003\000\
\003\000\000\000"

let yylen = "\002\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\001\000\001\000\001\000\
\003\000\003\000\004\000\003\000\004\000\000\000\002\000\000\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\014\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\000\000\000\000\020\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\019\000\021\000\
\000\000\025\000"

let yydgoto = "\002\000\
\009\000\030\000\046\000"

let yysindex = "\255\255\
\053\255\000\000\000\000\000\000\021\255\053\255\053\255\053\255\
\087\255\002\255\053\255\053\255\055\255\249\254\249\254\006\255\
\053\255\053\255\053\255\053\255\053\255\053\255\053\255\053\255\
\053\255\053\255\053\255\000\000\026\255\003\255\072\255\000\000\
\000\000\102\255\102\255\108\255\108\255\108\255\123\255\123\255\
\249\254\249\254\249\254\249\254\053\255\000\000\000\000\000\000\
\026\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\010\000\000\000\004\255\000\000\000\000\024\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\018\255\000\000\000\000\000\000\
\000\000\236\000\241\000\194\000\208\000\222\000\162\000\178\000\
\070\000\093\000\116\000\139\000\000\000\000\000\000\000\000\000\
\018\255\000\000"

let yygindex = "\000\000\
\252\255\000\000\234\255"

let yytablesize = 513
let yytable = "\001\000\
\016\000\013\000\014\000\015\000\028\000\016\000\029\000\031\000\
\033\000\026\000\047\000\022\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\013\000\
\010\000\024\000\050\000\011\000\000\000\000\000\045\000\012\000\
\000\000\000\000\000\000\000\000\000\000\000\000\016\000\017\000\
\049\000\018\000\019\000\020\000\000\000\021\000\012\000\022\000\
\023\000\024\000\025\000\026\000\027\000\003\000\004\000\005\000\
\000\000\000\000\000\000\006\000\000\000\000\000\032\000\000\000\
\000\000\000\000\000\000\016\000\017\000\008\000\018\000\019\000\
\020\000\007\000\021\000\008\000\022\000\023\000\024\000\025\000\
\026\000\027\000\000\000\048\000\016\000\017\000\000\000\018\000\
\019\000\020\000\000\000\021\000\009\000\022\000\023\000\024\000\
\025\000\026\000\027\000\016\000\017\000\000\000\018\000\019\000\
\020\000\000\000\021\000\000\000\022\000\023\000\024\000\025\000\
\026\000\027\000\016\000\010\000\000\000\000\000\019\000\020\000\
\016\000\021\000\000\000\022\000\023\000\024\000\025\000\026\000\
\027\000\022\000\023\000\024\000\025\000\026\000\027\000\016\000\
\000\000\000\000\011\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\025\000\026\000\027\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\
\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\
\016\000\000\000\000\000\000\000\016\000\016\000\016\000\000\000\
\016\000\016\000\016\000\000\000\016\000\000\000\016\000\016\000\
\016\000\016\000\016\000\016\000\013\000\000\000\000\000\013\000\
\000\000\000\000\000\000\013\000\000\000\013\000\000\000\013\000\
\013\000\013\000\000\000\013\000\000\000\013\000\013\000\013\000\
\013\000\013\000\013\000\012\000\000\000\000\000\012\000\000\000\
\000\000\000\000\012\000\000\000\012\000\000\000\012\000\012\000\
\012\000\000\000\012\000\000\000\012\000\012\000\012\000\012\000\
\012\000\012\000\008\000\000\000\000\000\008\000\000\000\000\000\
\000\000\008\000\000\000\008\000\000\000\008\000\008\000\008\000\
\000\000\008\000\000\000\008\000\008\000\008\000\008\000\008\000\
\008\000\009\000\000\000\000\000\009\000\000\000\000\000\000\000\
\009\000\000\000\009\000\000\000\009\000\009\000\009\000\000\000\
\009\000\000\000\009\000\009\000\009\000\009\000\009\000\009\000\
\010\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\
\000\000\010\000\000\000\010\000\010\000\010\000\000\000\010\000\
\000\000\010\000\010\000\010\000\010\000\010\000\010\000\011\000\
\000\000\000\000\011\000\000\000\000\000\000\000\011\000\000\000\
\011\000\000\000\011\000\011\000\011\000\000\000\011\000\000\000\
\011\000\011\000\011\000\011\000\011\000\011\000\006\000\000\000\
\000\000\006\000\000\000\000\000\000\000\006\000\000\000\006\000\
\000\000\006\000\006\000\006\000\000\000\006\000\007\000\006\000\
\006\000\007\000\000\000\000\000\000\000\007\000\000\000\007\000\
\000\000\007\000\007\000\007\000\000\000\007\000\003\000\007\000\
\007\000\003\000\000\000\000\000\000\000\003\000\000\000\003\000\
\000\000\003\000\003\000\003\000\001\000\003\000\000\000\001\000\
\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\
\001\000\001\000\002\000\001\000\000\000\002\000\000\000\000\000\
\000\000\002\000\000\000\002\000\000\000\002\000\002\000\002\000\
\004\000\002\000\000\000\004\000\000\000\005\000\000\000\004\000\
\005\000\004\000\000\000\004\000\005\000\000\000\005\000\000\000\
\005\000"

let yycheck = "\001\000\
\000\000\006\000\007\000\008\000\003\001\013\001\011\000\012\000\
\003\001\000\000\008\001\008\001\017\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\027\000\000\000\
\004\001\008\001\049\000\007\001\255\255\255\255\005\001\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\013\001\014\001\
\045\000\016\001\017\001\018\001\255\255\020\001\000\000\022\001\
\023\001\024\001\025\001\026\001\027\001\001\001\002\001\003\001\
\255\255\255\255\255\255\007\001\255\255\255\255\008\001\255\255\
\255\255\255\255\255\255\013\001\014\001\000\000\016\001\017\001\
\018\001\021\001\020\001\023\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\012\001\013\001\014\001\255\255\016\001\
\017\001\018\001\255\255\020\001\000\000\022\001\023\001\024\001\
\025\001\026\001\027\001\013\001\014\001\255\255\016\001\017\001\
\018\001\255\255\020\001\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\013\001\000\000\255\255\255\255\017\001\018\001\
\013\001\020\001\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\022\001\023\001\024\001\025\001\026\001\027\001\013\001\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\025\001\026\001\027\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\005\001\255\255\255\255\
\008\001\255\255\255\255\255\255\012\001\013\001\014\001\255\255\
\016\001\017\001\018\001\255\255\020\001\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\005\001\255\255\255\255\008\001\
\255\255\255\255\255\255\012\001\255\255\014\001\255\255\016\001\
\017\001\018\001\255\255\020\001\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\005\001\255\255\255\255\008\001\255\255\
\255\255\255\255\012\001\255\255\014\001\255\255\016\001\017\001\
\018\001\255\255\020\001\255\255\022\001\023\001\024\001\025\001\
\026\001\027\001\005\001\255\255\255\255\008\001\255\255\255\255\
\255\255\012\001\255\255\014\001\255\255\016\001\017\001\018\001\
\255\255\020\001\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\005\001\255\255\255\255\008\001\255\255\255\255\255\255\
\012\001\255\255\014\001\255\255\016\001\017\001\018\001\255\255\
\020\001\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\005\001\255\255\255\255\008\001\255\255\255\255\255\255\012\001\
\255\255\014\001\255\255\016\001\017\001\018\001\255\255\020\001\
\255\255\022\001\023\001\024\001\025\001\026\001\027\001\005\001\
\255\255\255\255\008\001\255\255\255\255\255\255\012\001\255\255\
\014\001\255\255\016\001\017\001\018\001\255\255\020\001\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\005\001\255\255\
\255\255\008\001\255\255\255\255\255\255\012\001\255\255\014\001\
\255\255\016\001\017\001\018\001\255\255\020\001\005\001\022\001\
\023\001\008\001\255\255\255\255\255\255\012\001\255\255\014\001\
\255\255\016\001\017\001\018\001\255\255\020\001\005\001\022\001\
\023\001\008\001\255\255\255\255\255\255\012\001\255\255\014\001\
\255\255\016\001\017\001\018\001\005\001\020\001\255\255\008\001\
\255\255\255\255\255\255\012\001\255\255\014\001\255\255\016\001\
\017\001\018\001\005\001\020\001\255\255\008\001\255\255\255\255\
\255\255\012\001\255\255\014\001\255\255\016\001\017\001\018\001\
\005\001\020\001\255\255\008\001\255\255\005\001\255\255\012\001\
\008\001\014\001\255\255\016\001\012\001\255\255\014\001\255\255\
\016\001"

let yynames_const = "\
  EOF\000\
  DOT\000\
  COMMA\000\
  SEMICOLON\000\
  LP\000\
  RP\000\
  LC\000\
  RC\000\
  LB\000\
  RB\000\
  DEREF\000\
  AND\000\
  COLON\000\
  OR\000\
  EQ\000\
  GT\000\
  ASSIGN\000\
  GEQ\000\
  NOT\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  MOD\000\
  EXPO\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr_syntax.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr_syntax.expression) in
    Obj.repr(
# 49 "expr_parser.mly"
                             ( CallOperator (">",[_1;_3]) )
# 293 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr_syntax.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr_syntax.expression) in
    Obj.repr(
# 50 "expr_parser.mly"
                              ( CallOperator (">=",[_1;_3]) )
# 301 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr_syntax.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr_syntax.expression) in
    Obj.repr(
# 51 "expr_parser.mly"
                             ( CallOperator ("==",[_1;_3]) )
# 309 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr_syntax.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr_syntax.expression) in
    Obj.repr(
# 52 "expr_parser.mly"
                              ( CallOperator ("&&",[_1;_3]) )
# 317 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr_syntax.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr_syntax.expression) in
    Obj.repr(
# 53 "expr_parser.mly"
                             ( CallOperator ("||",[_1;_3]) )
# 325 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr_syntax.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr_syntax.expression) in
    Obj.repr(
# 54 "expr_parser.mly"
                               ( CallOperator ("+",[_1;_3]) )
# 333 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr_syntax.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr_syntax.expression) in
    Obj.repr(
# 55 "expr_parser.mly"
                                ( CallOperator ("-",[_1;_3]) )
# 341 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr_syntax.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr_syntax.expression) in
    Obj.repr(
# 56 "expr_parser.mly"
                               ( CallOperator ("*",[_1;_3]) )
# 349 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr_syntax.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr_syntax.expression) in
    Obj.repr(
# 57 "expr_parser.mly"
                              ( CallOperator ("/",[_1;_3]) )
# 357 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr_syntax.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr_syntax.expression) in
    Obj.repr(
# 58 "expr_parser.mly"
                              ( CallOperator ("%",[_1;_3]) )
# 365 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr_syntax.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr_syntax.expression) in
    Obj.repr(
# 59 "expr_parser.mly"
                               ( CallOperator ("**",[_1;_3]) )
# 373 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Expr_syntax.expression) in
    Obj.repr(
# 60 "expr_parser.mly"
                                  ( CallOperator ("-",[_2]) )
# 380 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Expr_syntax.expression) in
    Obj.repr(
# 61 "expr_parser.mly"
                   ( CallOperator ("!",[_2]) )
# 387 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 62 "expr_parser.mly"
        ( Int _1 )
# 394 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 63 "expr_parser.mly"
          ( Float _1 )
# 401 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 64 "expr_parser.mly"
          ( Ident _1 )
# 408 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 65 "expr_parser.mly"
                    ( Field (_1,_3) )
# 416 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr_syntax.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "expr_parser.mly"
                           ( Deref(_1, _3) )
# 424 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'Args) in
    Obj.repr(
# 67 "expr_parser.mly"
                     ( Call (_1, _3) )
# 432 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Expr_syntax.expression) in
    Obj.repr(
# 68 "expr_parser.mly"
                     ( _2 )
# 439 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Expr_syntax.expression) in
    Obj.repr(
# 69 "expr_parser.mly"
                           ( Index (_1, _3) )
# 447 "expr_parser.ml"
               : Expr_syntax.expression))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "expr_parser.mly"
      ( [] )
# 453 "expr_parser.ml"
               : 'Args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Expr_syntax.expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'NextArgs) in
    Obj.repr(
# 73 "expr_parser.mly"
                        ( _1::_2 )
# 461 "expr_parser.ml"
               : 'Args))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "expr_parser.mly"
          ( [] )
# 467 "expr_parser.ml"
               : 'NextArgs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Expr_syntax.expression) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'NextArgs) in
    Obj.repr(
# 77 "expr_parser.mly"
                              ( _2::_3 )
# 475 "expr_parser.ml"
               : 'NextArgs))
(* Entry expression *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expression (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Expr_syntax.expression)
